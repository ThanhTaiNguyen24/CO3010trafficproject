
Traffic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000404c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004158  08004158  00014158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041ec  080041ec  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  080041ec  080041ec  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041ec  080041ec  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080041f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000009c  08004290  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08004290  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fa8  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b4b  00000000  00000000  0003706d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00039bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  0003ab78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a4a  00000000  00000000  0003ba30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a81  00000000  00000000  0005547a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d827  00000000  00000000  00069efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7722  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044b4  00000000  00000000  000f7778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004140 	.word	0x08004140

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08004140 	.word	0x08004140

0800014c <checkflag>:


int button_pressed_counter[number_of_buttons] = {100, 100, 100};


int checkflag(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <checkflag+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <checkflag+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <checkflag+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <checkflag+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000b8 	.word	0x200000b8

08000180 <getKeyInput>:


void getKeyInput(void) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for(int i = 0; i < number_of_buttons; i++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e06f      	b.n	800026c <getKeyInput+0xec>
		keyReg0[i] = keyReg1[i];
 800018c:	4a3b      	ldr	r2, [pc, #236]	; (800027c <getKeyInput+0xfc>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	493a      	ldr	r1, [pc, #232]	; (8000280 <getKeyInput+0x100>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 800019c:	4a39      	ldr	r2, [pc, #228]	; (8000284 <getKeyInput+0x104>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4935      	ldr	r1, [pc, #212]	; (800027c <getKeyInput+0xfc>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg2[i] = HAL_GPIO_ReadPin(portB[i], buttons[i]);
 80001ac:	4a36      	ldr	r2, [pc, #216]	; (8000288 <getKeyInput+0x108>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4935      	ldr	r1, [pc, #212]	; (800028c <getKeyInput+0x10c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001bc:	4619      	mov	r1, r3
 80001be:	4610      	mov	r0, r2
 80001c0:	f001 fd86 	bl	8001cd0 <HAL_GPIO_ReadPin>
 80001c4:	4603      	mov	r3, r0
 80001c6:	4619      	mov	r1, r3
 80001c8:	4a2e      	ldr	r2, [pc, #184]	; (8000284 <getKeyInput+0x104>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((keyReg0[i] == keyReg1[i])&&(keyReg1[i] == keyReg2[i])) {
 80001d0:	4a2b      	ldr	r2, [pc, #172]	; (8000280 <getKeyInput+0x100>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	4928      	ldr	r1, [pc, #160]	; (800027c <getKeyInput+0xfc>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	d140      	bne.n	8000266 <getKeyInput+0xe6>
 80001e4:	4a25      	ldr	r2, [pc, #148]	; (800027c <getKeyInput+0xfc>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ec:	4925      	ldr	r1, [pc, #148]	; (8000284 <getKeyInput+0x104>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d136      	bne.n	8000266 <getKeyInput+0xe6>
			if (keyReg3[i] != keyReg2[i]){
 80001f8:	4a25      	ldr	r2, [pc, #148]	; (8000290 <getKeyInput+0x110>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	4920      	ldr	r1, [pc, #128]	; (8000284 <getKeyInput+0x104>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000208:	429a      	cmp	r2, r3
 800020a:	d018      	beq.n	800023e <getKeyInput+0xbe>
				keyReg3[i] = keyReg2[i];
 800020c:	4a1d      	ldr	r2, [pc, #116]	; (8000284 <getKeyInput+0x104>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	491e      	ldr	r1, [pc, #120]	; (8000290 <getKeyInput+0x110>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (keyReg2[i] <= pressed_button){
 800021c:	4a19      	ldr	r2, [pc, #100]	; (8000284 <getKeyInput+0x104>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000224:	2b00      	cmp	r3, #0
 8000226:	dc1e      	bgt.n	8000266 <getKeyInput+0xe6>
					button_pressed_counter[i] = 100;
 8000228:	4a1a      	ldr	r2, [pc, #104]	; (8000294 <getKeyInput+0x114>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2164      	movs	r1, #100	; 0x64
 800022e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		            button_flag[i] = 1;
 8000232:	4a19      	ldr	r2, [pc, #100]	; (8000298 <getKeyInput+0x118>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2101      	movs	r1, #1
 8000238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800023c:	e013      	b.n	8000266 <getKeyInput+0xe6>
		        }
		    } else {
		    	 button_pressed_counter[i]--;
 800023e:	4a15      	ldr	r2, [pc, #84]	; (8000294 <getKeyInput+0x114>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000246:	1e5a      	subs	r2, r3, #1
 8000248:	4912      	ldr	r1, [pc, #72]	; (8000294 <getKeyInput+0x114>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		         if (button_pressed_counter[i] <= 0){
 8000250:	4a10      	ldr	r2, [pc, #64]	; (8000294 <getKeyInput+0x114>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000258:	2b00      	cmp	r3, #0
 800025a:	dc04      	bgt.n	8000266 <getKeyInput+0xe6>
		        	 keyReg3[i] = normal_button;
 800025c:	4a0c      	ldr	r2, [pc, #48]	; (8000290 <getKeyInput+0x110>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2101      	movs	r1, #1
 8000262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < number_of_buttons; i++){
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	3301      	adds	r3, #1
 800026a:	607b      	str	r3, [r7, #4]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b02      	cmp	r3, #2
 8000270:	dd8c      	ble.n	800018c <getKeyInput+0xc>
		         }
		    }
		}
	}
}
 8000272:	bf00      	nop
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	200000fc 	.word	0x200000fc
 8000280:	20000114 	.word	0x20000114
 8000284:	20000120 	.word	0x20000120
 8000288:	20000000 	.word	0x20000000
 800028c:	2000000c 	.word	0x2000000c
 8000290:	20000108 	.word	0x20000108
 8000294:	20000014 	.word	0x20000014
 8000298:	200000b8 	.word	0x200000b8

0800029c <checkManual>:
#include <fsm_automatic.h>

void checkManual(){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	//updateLedBuffer();
	updateLCDBuffer();
 80002a0:	f000 fb92 	bl	80009c8 <updateLCDBuffer>
	if (checkflag(0) == 1){
 80002a4:	2000      	movs	r0, #0
 80002a6:	f7ff ff51 	bl	800014c <checkflag>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d10e      	bne.n	80002ce <checkManual+0x32>
		initialduration = currentred;
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <checkManual+0x38>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a08      	ldr	r2, [pc, #32]	; (80002d8 <checkManual+0x3c>)
 80002b6:	6013      	str	r3, [r2, #0]
		traffic_turnoffall();
 80002b8:	f001 f8f0 	bl	800149c <traffic_turnoffall>
		status = MAN_RED;
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <checkManual+0x40>)
 80002be:	2202      	movs	r2, #2
 80002c0:	601a      	str	r2, [r3, #0]
		setTimerRoad1(100);
 80002c2:	2064      	movs	r0, #100	; 0x64
 80002c4:	f000 fe40 	bl	8000f48 <setTimerRoad1>
		setTimerRoad2(100);
 80002c8:	2064      	movs	r0, #100	; 0x64
 80002ca:	f000 fe59 	bl	8000f80 <setTimerRoad2>
	}
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000020 	.word	0x20000020
 80002d8:	200000d0 	.word	0x200000d0
 80002dc:	200000c4 	.word	0x200000c4

080002e0 <fsm_automatic_run>:
void fsm_automatic_run(){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	switch (status) {
 80002e4:	4baa      	ldr	r3, [pc, #680]	; (8000590 <fsm_automatic_run+0x2b0>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b3c      	cmp	r3, #60	; 0x3c
 80002ea:	f000 80e6 	beq.w	80004ba <fsm_automatic_run+0x1da>
 80002ee:	2b3c      	cmp	r3, #60	; 0x3c
 80002f0:	f300 813f 	bgt.w	8000572 <fsm_automatic_run+0x292>
 80002f4:	2b28      	cmp	r3, #40	; 0x28
 80002f6:	dc59      	bgt.n	80003ac <fsm_automatic_run+0xcc>
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	f340 813a 	ble.w	8000572 <fsm_automatic_run+0x292>
 80002fe:	3b01      	subs	r3, #1
 8000300:	2b27      	cmp	r3, #39	; 0x27
 8000302:	f200 8136 	bhi.w	8000572 <fsm_automatic_run+0x292>
 8000306:	a201      	add	r2, pc, #4	; (adr r2, 800030c <fsm_automatic_run+0x2c>)
 8000308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030c:	080003b5 	.word	0x080003b5
 8000310:	08000573 	.word	0x08000573
 8000314:	08000573 	.word	0x08000573
 8000318:	08000573 	.word	0x08000573
 800031c:	08000573 	.word	0x08000573
 8000320:	08000573 	.word	0x08000573
 8000324:	08000573 	.word	0x08000573
 8000328:	08000573 	.word	0x08000573
 800032c:	08000573 	.word	0x08000573
 8000330:	08000491 	.word	0x08000491
 8000334:	08000573 	.word	0x08000573
 8000338:	08000573 	.word	0x08000573
 800033c:	08000573 	.word	0x08000573
 8000340:	08000573 	.word	0x08000573
 8000344:	08000573 	.word	0x08000573
 8000348:	08000573 	.word	0x08000573
 800034c:	08000573 	.word	0x08000573
 8000350:	08000573 	.word	0x08000573
 8000354:	08000573 	.word	0x08000573
 8000358:	080003eb 	.word	0x080003eb
 800035c:	08000573 	.word	0x08000573
 8000360:	08000573 	.word	0x08000573
 8000364:	08000573 	.word	0x08000573
 8000368:	08000573 	.word	0x08000573
 800036c:	08000573 	.word	0x08000573
 8000370:	08000573 	.word	0x08000573
 8000374:	08000573 	.word	0x08000573
 8000378:	08000573 	.word	0x08000573
 800037c:	08000573 	.word	0x08000573
 8000380:	0800042b 	.word	0x0800042b
 8000384:	08000573 	.word	0x08000573
 8000388:	08000573 	.word	0x08000573
 800038c:	08000573 	.word	0x08000573
 8000390:	08000573 	.word	0x08000573
 8000394:	08000573 	.word	0x08000573
 8000398:	08000573 	.word	0x08000573
 800039c:	08000573 	.word	0x08000573
 80003a0:	08000573 	.word	0x08000573
 80003a4:	08000573 	.word	0x08000573
 80003a8:	08000549 	.word	0x08000549
 80003ac:	2b32      	cmp	r3, #50	; 0x32
 80003ae:	f000 8099 	beq.w	80004e4 <fsm_automatic_run+0x204>
				road1duration = currentgreen;
				setTimerRoad1(currentgreen);
			}
			break;
		default:
			break;
 80003b2:	e0de      	b.n	8000572 <fsm_automatic_run+0x292>
			traffic_turnoffall();
 80003b4:	f001 f872 	bl	800149c <traffic_turnoffall>
			status = AUTO_1RED_2GREEN;
 80003b8:	4b75      	ldr	r3, [pc, #468]	; (8000590 <fsm_automatic_run+0x2b0>)
 80003ba:	2214      	movs	r2, #20
 80003bc:	601a      	str	r2, [r3, #0]
			road1duration = currentred;
 80003be:	4b75      	ldr	r3, [pc, #468]	; (8000594 <fsm_automatic_run+0x2b4>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a75      	ldr	r2, [pc, #468]	; (8000598 <fsm_automatic_run+0x2b8>)
 80003c4:	6013      	str	r3, [r2, #0]
			road2duration = currentgreen;
 80003c6:	4b75      	ldr	r3, [pc, #468]	; (800059c <fsm_automatic_run+0x2bc>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a75      	ldr	r2, [pc, #468]	; (80005a0 <fsm_automatic_run+0x2c0>)
 80003cc:	6013      	str	r3, [r2, #0]
			setTimerRoad1(currentred);
 80003ce:	4b71      	ldr	r3, [pc, #452]	; (8000594 <fsm_automatic_run+0x2b4>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 fdb8 	bl	8000f48 <setTimerRoad1>
			setTimerRoad2(currentgreen);
 80003d8:	4b70      	ldr	r3, [pc, #448]	; (800059c <fsm_automatic_run+0x2bc>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fdcf 	bl	8000f80 <setTimerRoad2>
			setTimer3(10);
 80003e2:	200a      	movs	r0, #10
 80003e4:	f000 fde8 	bl	8000fb8 <setTimer3>
			break;
 80003e8:	e0d0      	b.n	800058c <fsm_automatic_run+0x2ac>
			traffic_1red_2green();
 80003ea:	f000 ffd7 	bl	800139c <traffic_1red_2green>
			checkManual();
 80003ee:	f7ff ff55 	bl	800029c <checkManual>
			if (timerRoad2_flag == 1){
 80003f2:	4b6c      	ldr	r3, [pc, #432]	; (80005a4 <fsm_automatic_run+0x2c4>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	f040 80bd 	bne.w	8000576 <fsm_automatic_run+0x296>
				status = AUTO_1RED_2YELLOW;
 80003fc:	4b64      	ldr	r3, [pc, #400]	; (8000590 <fsm_automatic_run+0x2b0>)
 80003fe:	221e      	movs	r2, #30
 8000400:	601a      	str	r2, [r3, #0]
				road2duration = currentyellow;
 8000402:	4b69      	ldr	r3, [pc, #420]	; (80005a8 <fsm_automatic_run+0x2c8>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a66      	ldr	r2, [pc, #408]	; (80005a0 <fsm_automatic_run+0x2c0>)
 8000408:	6013      	str	r3, [r2, #0]
				lcd_counter2 = currentyellow/1000;
 800040a:	4b67      	ldr	r3, [pc, #412]	; (80005a8 <fsm_automatic_run+0x2c8>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a67      	ldr	r2, [pc, #412]	; (80005ac <fsm_automatic_run+0x2cc>)
 8000410:	fb82 1203 	smull	r1, r2, r2, r3
 8000414:	1192      	asrs	r2, r2, #6
 8000416:	17db      	asrs	r3, r3, #31
 8000418:	1ad3      	subs	r3, r2, r3
 800041a:	4a65      	ldr	r2, [pc, #404]	; (80005b0 <fsm_automatic_run+0x2d0>)
 800041c:	6013      	str	r3, [r2, #0]
				setTimerRoad2(currentyellow);
 800041e:	4b62      	ldr	r3, [pc, #392]	; (80005a8 <fsm_automatic_run+0x2c8>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fdac 	bl	8000f80 <setTimerRoad2>
			break;
 8000428:	e0a5      	b.n	8000576 <fsm_automatic_run+0x296>
			traffic_1red_2yellow();
 800042a:	f000 ffd7 	bl	80013dc <traffic_1red_2yellow>
			checkManual();
 800042e:	f7ff ff35 	bl	800029c <checkManual>
			if ((timerRoad1_flag == 1) && (timerRoad2_flag == 1)){
 8000432:	4b60      	ldr	r3, [pc, #384]	; (80005b4 <fsm_automatic_run+0x2d4>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d118      	bne.n	800046c <fsm_automatic_run+0x18c>
 800043a:	4b5a      	ldr	r3, [pc, #360]	; (80005a4 <fsm_automatic_run+0x2c4>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d114      	bne.n	800046c <fsm_automatic_run+0x18c>
				status = AUTO_1GREEN_2RED;
 8000442:	4b53      	ldr	r3, [pc, #332]	; (8000590 <fsm_automatic_run+0x2b0>)
 8000444:	223c      	movs	r2, #60	; 0x3c
 8000446:	601a      	str	r2, [r3, #0]
				road1duration = currentgreen;
 8000448:	4b54      	ldr	r3, [pc, #336]	; (800059c <fsm_automatic_run+0x2bc>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a52      	ldr	r2, [pc, #328]	; (8000598 <fsm_automatic_run+0x2b8>)
 800044e:	6013      	str	r3, [r2, #0]
				road2duration = currentred;
 8000450:	4b50      	ldr	r3, [pc, #320]	; (8000594 <fsm_automatic_run+0x2b4>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a52      	ldr	r2, [pc, #328]	; (80005a0 <fsm_automatic_run+0x2c0>)
 8000456:	6013      	str	r3, [r2, #0]
				setTimerRoad1(currentgreen);
 8000458:	4b50      	ldr	r3, [pc, #320]	; (800059c <fsm_automatic_run+0x2bc>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4618      	mov	r0, r3
 800045e:	f000 fd73 	bl	8000f48 <setTimerRoad1>
				setTimerRoad2(currentred);
 8000462:	4b4c      	ldr	r3, [pc, #304]	; (8000594 <fsm_automatic_run+0x2b4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4618      	mov	r0, r3
 8000468:	f000 fd8a 	bl	8000f80 <setTimerRoad2>
			if (timerRoad2_flag == 1){
 800046c:	4b4d      	ldr	r3, [pc, #308]	; (80005a4 <fsm_automatic_run+0x2c4>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b01      	cmp	r3, #1
 8000472:	f040 8082 	bne.w	800057a <fsm_automatic_run+0x29a>
				status = AUTO_1RED_2RED;
 8000476:	4b46      	ldr	r3, [pc, #280]	; (8000590 <fsm_automatic_run+0x2b0>)
 8000478:	220a      	movs	r2, #10
 800047a:	601a      	str	r2, [r3, #0]
				road2duration = currentred;
 800047c:	4b45      	ldr	r3, [pc, #276]	; (8000594 <fsm_automatic_run+0x2b4>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a47      	ldr	r2, [pc, #284]	; (80005a0 <fsm_automatic_run+0x2c0>)
 8000482:	6013      	str	r3, [r2, #0]
				setTimerRoad2(currentred);
 8000484:	4b43      	ldr	r3, [pc, #268]	; (8000594 <fsm_automatic_run+0x2b4>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4618      	mov	r0, r3
 800048a:	f000 fd79 	bl	8000f80 <setTimerRoad2>
			break;
 800048e:	e074      	b.n	800057a <fsm_automatic_run+0x29a>
			traffic_1red_2red();
 8000490:	f000 ff64 	bl	800135c <traffic_1red_2red>
			checkManual();
 8000494:	f7ff ff02 	bl	800029c <checkManual>
			if (timerRoad1_flag == 1){
 8000498:	4b46      	ldr	r3, [pc, #280]	; (80005b4 <fsm_automatic_run+0x2d4>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d16e      	bne.n	800057e <fsm_automatic_run+0x29e>
				status = AUTO_1GREEN_2RED;
 80004a0:	4b3b      	ldr	r3, [pc, #236]	; (8000590 <fsm_automatic_run+0x2b0>)
 80004a2:	223c      	movs	r2, #60	; 0x3c
 80004a4:	601a      	str	r2, [r3, #0]
				road1duration = currentgreen;
 80004a6:	4b3d      	ldr	r3, [pc, #244]	; (800059c <fsm_automatic_run+0x2bc>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a3b      	ldr	r2, [pc, #236]	; (8000598 <fsm_automatic_run+0x2b8>)
 80004ac:	6013      	str	r3, [r2, #0]
				setTimerRoad1(currentgreen);
 80004ae:	4b3b      	ldr	r3, [pc, #236]	; (800059c <fsm_automatic_run+0x2bc>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 fd48 	bl	8000f48 <setTimerRoad1>
			break;
 80004b8:	e061      	b.n	800057e <fsm_automatic_run+0x29e>
			traffic_1green_2red();
 80004ba:	f000 ffaf 	bl	800141c <traffic_1green_2red>
			checkManual();
 80004be:	f7ff feed 	bl	800029c <checkManual>
			if (timerRoad1_flag == 1){
 80004c2:	4b3c      	ldr	r3, [pc, #240]	; (80005b4 <fsm_automatic_run+0x2d4>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d15b      	bne.n	8000582 <fsm_automatic_run+0x2a2>
				status = AUTO_1YELLOW_2RED;
 80004ca:	4b31      	ldr	r3, [pc, #196]	; (8000590 <fsm_automatic_run+0x2b0>)
 80004cc:	2232      	movs	r2, #50	; 0x32
 80004ce:	601a      	str	r2, [r3, #0]
				road1duration = currentyellow;
 80004d0:	4b35      	ldr	r3, [pc, #212]	; (80005a8 <fsm_automatic_run+0x2c8>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a30      	ldr	r2, [pc, #192]	; (8000598 <fsm_automatic_run+0x2b8>)
 80004d6:	6013      	str	r3, [r2, #0]
				setTimerRoad1(currentyellow);
 80004d8:	4b33      	ldr	r3, [pc, #204]	; (80005a8 <fsm_automatic_run+0x2c8>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 fd33 	bl	8000f48 <setTimerRoad1>
			break;
 80004e2:	e04e      	b.n	8000582 <fsm_automatic_run+0x2a2>
			traffic_1yellow_2red();
 80004e4:	f000 ffba 	bl	800145c <traffic_1yellow_2red>
			checkManual();
 80004e8:	f7ff fed8 	bl	800029c <checkManual>
			if((timerRoad1_flag == 1) && (timerRoad2_flag == 1)){
 80004ec:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <fsm_automatic_run+0x2d4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d118      	bne.n	8000526 <fsm_automatic_run+0x246>
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <fsm_automatic_run+0x2c4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d114      	bne.n	8000526 <fsm_automatic_run+0x246>
				status = AUTO_1RED_2GREEN;
 80004fc:	4b24      	ldr	r3, [pc, #144]	; (8000590 <fsm_automatic_run+0x2b0>)
 80004fe:	2214      	movs	r2, #20
 8000500:	601a      	str	r2, [r3, #0]
				road1duration = currentred;
 8000502:	4b24      	ldr	r3, [pc, #144]	; (8000594 <fsm_automatic_run+0x2b4>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a24      	ldr	r2, [pc, #144]	; (8000598 <fsm_automatic_run+0x2b8>)
 8000508:	6013      	str	r3, [r2, #0]
				road2duration = currentgreen;
 800050a:	4b24      	ldr	r3, [pc, #144]	; (800059c <fsm_automatic_run+0x2bc>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a24      	ldr	r2, [pc, #144]	; (80005a0 <fsm_automatic_run+0x2c0>)
 8000510:	6013      	str	r3, [r2, #0]
				setTimerRoad1(currentred);
 8000512:	4b20      	ldr	r3, [pc, #128]	; (8000594 <fsm_automatic_run+0x2b4>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f000 fd16 	bl	8000f48 <setTimerRoad1>
				setTimerRoad2(currentgreen);
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <fsm_automatic_run+0x2bc>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f000 fd2d 	bl	8000f80 <setTimerRoad2>
			if (timerRoad1_flag == 1){
 8000526:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <fsm_automatic_run+0x2d4>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d12b      	bne.n	8000586 <fsm_automatic_run+0x2a6>
				status = AUTO_1RED_2RED1;
 800052e:	4b18      	ldr	r3, [pc, #96]	; (8000590 <fsm_automatic_run+0x2b0>)
 8000530:	2228      	movs	r2, #40	; 0x28
 8000532:	601a      	str	r2, [r3, #0]
				road1duration = currentred;
 8000534:	4b17      	ldr	r3, [pc, #92]	; (8000594 <fsm_automatic_run+0x2b4>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a17      	ldr	r2, [pc, #92]	; (8000598 <fsm_automatic_run+0x2b8>)
 800053a:	6013      	str	r3, [r2, #0]
				setTimerRoad1(currentred);
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <fsm_automatic_run+0x2b4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4618      	mov	r0, r3
 8000542:	f000 fd01 	bl	8000f48 <setTimerRoad1>
			break;
 8000546:	e01e      	b.n	8000586 <fsm_automatic_run+0x2a6>
			traffic_1red_2red();
 8000548:	f000 ff08 	bl	800135c <traffic_1red_2red>
			checkManual();
 800054c:	f7ff fea6 	bl	800029c <checkManual>
			if (timerRoad2_flag == 1){
 8000550:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <fsm_automatic_run+0x2c4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d118      	bne.n	800058a <fsm_automatic_run+0x2aa>
				status = AUTO_1GREEN_2RED;
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <fsm_automatic_run+0x2b0>)
 800055a:	223c      	movs	r2, #60	; 0x3c
 800055c:	601a      	str	r2, [r3, #0]
				road1duration = currentgreen;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <fsm_automatic_run+0x2bc>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a0d      	ldr	r2, [pc, #52]	; (8000598 <fsm_automatic_run+0x2b8>)
 8000564:	6013      	str	r3, [r2, #0]
				setTimerRoad1(currentgreen);
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <fsm_automatic_run+0x2bc>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fcec 	bl	8000f48 <setTimerRoad1>
			break;
 8000570:	e00b      	b.n	800058a <fsm_automatic_run+0x2aa>
			break;
 8000572:	bf00      	nop
 8000574:	e00a      	b.n	800058c <fsm_automatic_run+0x2ac>
			break;
 8000576:	bf00      	nop
 8000578:	e008      	b.n	800058c <fsm_automatic_run+0x2ac>
			break;
 800057a:	bf00      	nop
 800057c:	e006      	b.n	800058c <fsm_automatic_run+0x2ac>
			break;
 800057e:	bf00      	nop
 8000580:	e004      	b.n	800058c <fsm_automatic_run+0x2ac>
			break;
 8000582:	bf00      	nop
 8000584:	e002      	b.n	800058c <fsm_automatic_run+0x2ac>
			break;
 8000586:	bf00      	nop
 8000588:	e000      	b.n	800058c <fsm_automatic_run+0x2ac>
			break;
 800058a:	bf00      	nop
	}

}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000c4 	.word	0x200000c4
 8000594:	20000020 	.word	0x20000020
 8000598:	200000c8 	.word	0x200000c8
 800059c:	20000024 	.word	0x20000024
 80005a0:	200000cc 	.word	0x200000cc
 80005a4:	200000e8 	.word	0x200000e8
 80005a8:	20000028 	.word	0x20000028
 80005ac:	10624dd3 	.word	0x10624dd3
 80005b0:	200000d4 	.word	0x200000d4
 80005b4:	200000e4 	.word	0x200000e4

080005b8 <fsm_manual_run>:
 *  Created on: Oct 27, 2024
 *      Author: ASUS
 */
#include <fsm_manual.h>

void fsm_manual_run(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	switch (status) {
 80005bc:	4b92      	ldr	r3, [pc, #584]	; (8000808 <fsm_manual_run+0x250>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	f000 80b8 	beq.w	8000736 <fsm_manual_run+0x17e>
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	f300 8114 	bgt.w	80007f4 <fsm_manual_run+0x23c>
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d002      	beq.n	80005d6 <fsm_manual_run+0x1e>
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	d050      	beq.n	8000676 <fsm_manual_run+0xbe>
			if (checkflag(2) == 1){
				status = INIT;
			}
			break;
		default:
			break;
 80005d4:	e10e      	b.n	80007f4 <fsm_manual_run+0x23c>
			if ((timerRoad1_flag == 1) & (timerRoad2_flag ==1)){
 80005d6:	4b8d      	ldr	r3, [pc, #564]	; (800080c <fsm_manual_run+0x254>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	bf0c      	ite	eq
 80005de:	2301      	moveq	r3, #1
 80005e0:	2300      	movne	r3, #0
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b8a      	ldr	r3, [pc, #552]	; (8000810 <fsm_manual_run+0x258>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	bf0c      	ite	eq
 80005ec:	2301      	moveq	r3, #1
 80005ee:	2300      	movne	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	4013      	ands	r3, r2
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d00b      	beq.n	8000612 <fsm_manual_run+0x5a>
				traffic_manualred();
 80005fa:	f000 ff6f 	bl	80014dc <traffic_manualred>
				updateLCDManualRedBuffer();
 80005fe:	f000 fa2d 	bl	8000a5c <updateLCDManualRedBuffer>
				setTimerRoad1(500);
 8000602:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000606:	f000 fc9f 	bl	8000f48 <setTimerRoad1>
				setTimerRoad2(500);
 800060a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060e:	f000 fcb7 	bl	8000f80 <setTimerRoad2>
			if (checkflag(0) == 1){
 8000612:	2000      	movs	r0, #0
 8000614:	f7ff fd9a 	bl	800014c <checkflag>
 8000618:	4603      	mov	r3, r0
 800061a:	2b01      	cmp	r3, #1
 800061c:	d10a      	bne.n	8000634 <fsm_manual_run+0x7c>
				status = MAN_YELLOW;
 800061e:	4b7a      	ldr	r3, [pc, #488]	; (8000808 <fsm_manual_run+0x250>)
 8000620:	2203      	movs	r2, #3
 8000622:	601a      	str	r2, [r3, #0]
				currentred = initialduration;
 8000624:	4b7b      	ldr	r3, [pc, #492]	; (8000814 <fsm_manual_run+0x25c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a7b      	ldr	r2, [pc, #492]	; (8000818 <fsm_manual_run+0x260>)
 800062a:	6013      	str	r3, [r2, #0]
				initialduration = currentyellow;
 800062c:	4b7b      	ldr	r3, [pc, #492]	; (800081c <fsm_manual_run+0x264>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a78      	ldr	r2, [pc, #480]	; (8000814 <fsm_manual_run+0x25c>)
 8000632:	6013      	str	r3, [r2, #0]
			if (checkflag(1) == 1){
 8000634:	2001      	movs	r0, #1
 8000636:	f7ff fd89 	bl	800014c <checkflag>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d10f      	bne.n	8000660 <fsm_manual_run+0xa8>
				if(currentred <= 99000){
 8000640:	4b75      	ldr	r3, [pc, #468]	; (8000818 <fsm_manual_run+0x260>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a76      	ldr	r2, [pc, #472]	; (8000820 <fsm_manual_run+0x268>)
 8000646:	4293      	cmp	r3, r2
 8000648:	dc06      	bgt.n	8000658 <fsm_manual_run+0xa0>
					currentred += 1000;
 800064a:	4b73      	ldr	r3, [pc, #460]	; (8000818 <fsm_manual_run+0x260>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000652:	4a71      	ldr	r2, [pc, #452]	; (8000818 <fsm_manual_run+0x260>)
 8000654:	6013      	str	r3, [r2, #0]
 8000656:	e003      	b.n	8000660 <fsm_manual_run+0xa8>
					currentred = 1000;
 8000658:	4b6f      	ldr	r3, [pc, #444]	; (8000818 <fsm_manual_run+0x260>)
 800065a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800065e:	601a      	str	r2, [r3, #0]
			if (checkflag(2) == 1){
 8000660:	2002      	movs	r0, #2
 8000662:	f7ff fd73 	bl	800014c <checkflag>
 8000666:	4603      	mov	r3, r0
 8000668:	2b01      	cmp	r3, #1
 800066a:	f040 80c5 	bne.w	80007f8 <fsm_manual_run+0x240>
				status = INIT;
 800066e:	4b66      	ldr	r3, [pc, #408]	; (8000808 <fsm_manual_run+0x250>)
 8000670:	2201      	movs	r2, #1
 8000672:	601a      	str	r2, [r3, #0]
			break;
 8000674:	e0c0      	b.n	80007f8 <fsm_manual_run+0x240>
			if ((timerRoad1_flag == 1) & (timerRoad2_flag ==1)){
 8000676:	4b65      	ldr	r3, [pc, #404]	; (800080c <fsm_manual_run+0x254>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b01      	cmp	r3, #1
 800067c:	bf0c      	ite	eq
 800067e:	2301      	moveq	r3, #1
 8000680:	2300      	movne	r3, #0
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b62      	ldr	r3, [pc, #392]	; (8000810 <fsm_manual_run+0x258>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	bf0c      	ite	eq
 800068c:	2301      	moveq	r3, #1
 800068e:	2300      	movne	r3, #0
 8000690:	b2db      	uxtb	r3, r3
 8000692:	4013      	ands	r3, r2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	2b00      	cmp	r3, #0
 8000698:	d00b      	beq.n	80006b2 <fsm_manual_run+0xfa>
				traffic_manualyellow();
 800069a:	f000 ff9b 	bl	80015d4 <traffic_manualyellow>
				updateLCDManualYellowBuffer();
 800069e:	f000 fa21 	bl	8000ae4 <updateLCDManualYellowBuffer>
				setTimerRoad1(500);
 80006a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a6:	f000 fc4f 	bl	8000f48 <setTimerRoad1>
				setTimerRoad2(500);
 80006aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ae:	f000 fc67 	bl	8000f80 <setTimerRoad2>
			if (checkflag(0) == 1){
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff fd4a 	bl	800014c <checkflag>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d10a      	bne.n	80006d4 <fsm_manual_run+0x11c>
				status = MAN_GREEN;
 80006be:	4b52      	ldr	r3, [pc, #328]	; (8000808 <fsm_manual_run+0x250>)
 80006c0:	2204      	movs	r2, #4
 80006c2:	601a      	str	r2, [r3, #0]
				currentyellow = initialduration;
 80006c4:	4b53      	ldr	r3, [pc, #332]	; (8000814 <fsm_manual_run+0x25c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a54      	ldr	r2, [pc, #336]	; (800081c <fsm_manual_run+0x264>)
 80006ca:	6013      	str	r3, [r2, #0]
				initialduration = currentgreen;
 80006cc:	4b55      	ldr	r3, [pc, #340]	; (8000824 <fsm_manual_run+0x26c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a50      	ldr	r2, [pc, #320]	; (8000814 <fsm_manual_run+0x25c>)
 80006d2:	6013      	str	r3, [r2, #0]
			if (checkflag(1) == 1){
 80006d4:	2001      	movs	r0, #1
 80006d6:	f7ff fd39 	bl	800014c <checkflag>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d120      	bne.n	8000722 <fsm_manual_run+0x16a>
				if(currentyellow <= 99000 ){
 80006e0:	4b4e      	ldr	r3, [pc, #312]	; (800081c <fsm_manual_run+0x264>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a4e      	ldr	r2, [pc, #312]	; (8000820 <fsm_manual_run+0x268>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	dc17      	bgt.n	800071a <fsm_manual_run+0x162>
					if (currentred > currentyellow + currentgreen){
 80006ea:	4b4c      	ldr	r3, [pc, #304]	; (800081c <fsm_manual_run+0x264>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4b4d      	ldr	r3, [pc, #308]	; (8000824 <fsm_manual_run+0x26c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	441a      	add	r2, r3
 80006f4:	4b48      	ldr	r3, [pc, #288]	; (8000818 <fsm_manual_run+0x260>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	da06      	bge.n	800070a <fsm_manual_run+0x152>
						currentyellow += 1000;
 80006fc:	4b47      	ldr	r3, [pc, #284]	; (800081c <fsm_manual_run+0x264>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000704:	4a45      	ldr	r2, [pc, #276]	; (800081c <fsm_manual_run+0x264>)
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	e00b      	b.n	8000722 <fsm_manual_run+0x16a>
						currentyellow = currentred - currentgreen;
 800070a:	4b43      	ldr	r3, [pc, #268]	; (8000818 <fsm_manual_run+0x260>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4b45      	ldr	r3, [pc, #276]	; (8000824 <fsm_manual_run+0x26c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	4a41      	ldr	r2, [pc, #260]	; (800081c <fsm_manual_run+0x264>)
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	e003      	b.n	8000722 <fsm_manual_run+0x16a>
					currentyellow = 1000;
 800071a:	4b40      	ldr	r3, [pc, #256]	; (800081c <fsm_manual_run+0x264>)
 800071c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000720:	601a      	str	r2, [r3, #0]
			if (checkflag(2) == 1){
 8000722:	2002      	movs	r0, #2
 8000724:	f7ff fd12 	bl	800014c <checkflag>
 8000728:	4603      	mov	r3, r0
 800072a:	2b01      	cmp	r3, #1
 800072c:	d166      	bne.n	80007fc <fsm_manual_run+0x244>
				status = INIT;
 800072e:	4b36      	ldr	r3, [pc, #216]	; (8000808 <fsm_manual_run+0x250>)
 8000730:	2201      	movs	r2, #1
 8000732:	601a      	str	r2, [r3, #0]
			break;
 8000734:	e062      	b.n	80007fc <fsm_manual_run+0x244>
			if ((timerRoad1_flag == 1) & (timerRoad2_flag ==1)){
 8000736:	4b35      	ldr	r3, [pc, #212]	; (800080c <fsm_manual_run+0x254>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b01      	cmp	r3, #1
 800073c:	bf0c      	ite	eq
 800073e:	2301      	moveq	r3, #1
 8000740:	2300      	movne	r3, #0
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b32      	ldr	r3, [pc, #200]	; (8000810 <fsm_manual_run+0x258>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b01      	cmp	r3, #1
 800074a:	bf0c      	ite	eq
 800074c:	2301      	moveq	r3, #1
 800074e:	2300      	movne	r3, #0
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4013      	ands	r3, r2
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d00b      	beq.n	8000772 <fsm_manual_run+0x1ba>
				traffic_manualgreen();
 800075a:	f000 fefd 	bl	8001558 <traffic_manualgreen>
				updateLCDManualGreenBuffer();
 800075e:	f000 fa05 	bl	8000b6c <updateLCDManualGreenBuffer>
				setTimerRoad1(500);
 8000762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000766:	f000 fbef 	bl	8000f48 <setTimerRoad1>
				setTimerRoad2(500);
 800076a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800076e:	f000 fc07 	bl	8000f80 <setTimerRoad2>
			if (checkflag(0) == 1){
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff fcea 	bl	800014c <checkflag>
 8000778:	4603      	mov	r3, r0
 800077a:	2b01      	cmp	r3, #1
 800077c:	d109      	bne.n	8000792 <fsm_manual_run+0x1da>
				status = INIT;
 800077e:	4b22      	ldr	r3, [pc, #136]	; (8000808 <fsm_manual_run+0x250>)
 8000780:	2201      	movs	r2, #1
 8000782:	601a      	str	r2, [r3, #0]
				currentgreen = initialduration;
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <fsm_manual_run+0x25c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a26      	ldr	r2, [pc, #152]	; (8000824 <fsm_manual_run+0x26c>)
 800078a:	6013      	str	r3, [r2, #0]
				initialduration = 0;
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <fsm_manual_run+0x25c>)
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
			if (checkflag(1) == 1){
 8000792:	2001      	movs	r0, #1
 8000794:	f7ff fcda 	bl	800014c <checkflag>
 8000798:	4603      	mov	r3, r0
 800079a:	2b01      	cmp	r3, #1
 800079c:	d120      	bne.n	80007e0 <fsm_manual_run+0x228>
				if (currentgreen <= 99000){
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <fsm_manual_run+0x26c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a1f      	ldr	r2, [pc, #124]	; (8000820 <fsm_manual_run+0x268>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	dc17      	bgt.n	80007d8 <fsm_manual_run+0x220>
					if (currentred > (currentgreen + currentyellow)){
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <fsm_manual_run+0x26c>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <fsm_manual_run+0x264>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	441a      	add	r2, r3
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <fsm_manual_run+0x260>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	da06      	bge.n	80007c8 <fsm_manual_run+0x210>
						currentgreen += 1000;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <fsm_manual_run+0x26c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80007c2:	4a18      	ldr	r2, [pc, #96]	; (8000824 <fsm_manual_run+0x26c>)
 80007c4:	6013      	str	r3, [r2, #0]
 80007c6:	e00b      	b.n	80007e0 <fsm_manual_run+0x228>
						currentgreen = currentred - currentyellow;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <fsm_manual_run+0x260>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <fsm_manual_run+0x264>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	4a14      	ldr	r2, [pc, #80]	; (8000824 <fsm_manual_run+0x26c>)
 80007d4:	6013      	str	r3, [r2, #0]
 80007d6:	e003      	b.n	80007e0 <fsm_manual_run+0x228>
					currentgreen = 1000;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <fsm_manual_run+0x26c>)
 80007da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007de:	601a      	str	r2, [r3, #0]
			if (checkflag(2) == 1){
 80007e0:	2002      	movs	r0, #2
 80007e2:	f7ff fcb3 	bl	800014c <checkflag>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d109      	bne.n	8000800 <fsm_manual_run+0x248>
				status = INIT;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <fsm_manual_run+0x250>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	601a      	str	r2, [r3, #0]
			break;
 80007f2:	e005      	b.n	8000800 <fsm_manual_run+0x248>
			break;
 80007f4:	bf00      	nop
 80007f6:	e004      	b.n	8000802 <fsm_manual_run+0x24a>
			break;
 80007f8:	bf00      	nop
 80007fa:	e002      	b.n	8000802 <fsm_manual_run+0x24a>
			break;
 80007fc:	bf00      	nop
 80007fe:	e000      	b.n	8000802 <fsm_manual_run+0x24a>
			break;
 8000800:	bf00      	nop
	}
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000c4 	.word	0x200000c4
 800080c:	200000e4 	.word	0x200000e4
 8000810:	200000e8 	.word	0x200000e8
 8000814:	200000d0 	.word	0x200000d0
 8000818:	20000020 	.word	0x20000020
 800081c:	20000028 	.word	0x20000028
 8000820:	000182b8 	.word	0x000182b8
 8000824:	20000024 	.word	0x20000024

08000828 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af02      	add	r7, sp, #8
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	f023 030f 	bic.w	r3, r3, #15
 8000838:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	f043 030c 	orr.w	r3, r3, #12
 8000846:	b2db      	uxtb	r3, r3
 8000848:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	b2db      	uxtb	r3, r3
 8000852:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000854:	7bbb      	ldrb	r3, [r7, #14]
 8000856:	f043 030c 	orr.w	r3, r3, #12
 800085a:	b2db      	uxtb	r3, r3
 800085c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800085e:	7bbb      	ldrb	r3, [r7, #14]
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	b2db      	uxtb	r3, r3
 8000866:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000868:	f107 0208 	add.w	r2, r7, #8
 800086c:	2364      	movs	r3, #100	; 0x64
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	2304      	movs	r3, #4
 8000872:	2142      	movs	r1, #66	; 0x42
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <lcd_send_cmd+0x5c>)
 8000876:	f001 fbc1 	bl	8001ffc <HAL_I2C_Master_Transmit>
}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000012c 	.word	0x2000012c

08000888 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af02      	add	r7, sp, #8
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f023 030f 	bic.w	r3, r3, #15
 8000898:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	011b      	lsls	r3, r3, #4
 800089e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	f043 030d 	orr.w	r3, r3, #13
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	f043 0309 	orr.w	r3, r3, #9
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80008b4:	7bbb      	ldrb	r3, [r7, #14]
 80008b6:	f043 030d 	orr.w	r3, r3, #13
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80008be:	7bbb      	ldrb	r3, [r7, #14]
 80008c0:	f043 0309 	orr.w	r3, r3, #9
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80008c8:	f107 0208 	add.w	r2, r7, #8
 80008cc:	2364      	movs	r3, #100	; 0x64
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2304      	movs	r3, #4
 80008d2:	2142      	movs	r1, #66	; 0x42
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <lcd_send_data+0x5c>)
 80008d6:	f001 fb91 	bl	8001ffc <HAL_I2C_Master_Transmit>
}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000012c 	.word	0x2000012c

080008e8 <lcd_init>:

void lcd_init (void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80008ec:	2033      	movs	r0, #51	; 0x33
 80008ee:	f7ff ff9b 	bl	8000828 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80008f2:	2032      	movs	r0, #50	; 0x32
 80008f4:	f7ff ff98 	bl	8000828 <lcd_send_cmd>
	HAL_Delay(50);
 80008f8:	2032      	movs	r0, #50	; 0x32
 80008fa:	f000 ff33 	bl	8001764 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80008fe:	2028      	movs	r0, #40	; 0x28
 8000900:	f7ff ff92 	bl	8000828 <lcd_send_cmd>
	HAL_Delay(50);
 8000904:	2032      	movs	r0, #50	; 0x32
 8000906:	f000 ff2d 	bl	8001764 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800090a:	2001      	movs	r0, #1
 800090c:	f7ff ff8c 	bl	8000828 <lcd_send_cmd>
	HAL_Delay(50);
 8000910:	2032      	movs	r0, #50	; 0x32
 8000912:	f000 ff27 	bl	8001764 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000916:	2006      	movs	r0, #6
 8000918:	f7ff ff86 	bl	8000828 <lcd_send_cmd>
	HAL_Delay(50);
 800091c:	2032      	movs	r0, #50	; 0x32
 800091e:	f000 ff21 	bl	8001764 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000922:	200c      	movs	r0, #12
 8000924:	f7ff ff80 	bl	8000828 <lcd_send_cmd>
	HAL_Delay(50);
 8000928:	2032      	movs	r0, #50	; 0x32
 800092a:	f000 ff1b 	bl	8001764 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff ff7a 	bl	8000828 <lcd_send_cmd>
	HAL_Delay(50);
 8000934:	2032      	movs	r0, #50	; 0x32
 8000936:	f000 ff15 	bl	8001764 <HAL_Delay>
	lcd_send_cmd (0x80);
 800093a:	2080      	movs	r0, #128	; 0x80
 800093c:	f7ff ff74 	bl	8000828 <lcd_send_cmd>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800094c:	e006      	b.n	800095c <lcd_send_string+0x18>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	607a      	str	r2, [r7, #4]
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff ff96 	bl	8000888 <lcd_send_data>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1f4      	bne.n	800094e <lcd_send_string+0xa>
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <lcd_clear_display>:

void lcd_clear_display (void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000972:	2001      	movs	r0, #1
 8000974:	f7ff ff58 	bl	8000828 <lcd_send_cmd>
	HAL_Delay(2);
 8000978:	2002      	movs	r0, #2
 800097a:	f000 fef3 	bl	8001764 <HAL_Delay>
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}

08000982 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d108      	bne.n	80009a4 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	4413      	add	r3, r2
 800099c:	b2db      	uxtb	r3, r3
 800099e:	337f      	adds	r3, #127	; 0x7f
 80009a0:	73fb      	strb	r3, [r7, #15]
 80009a2:	e008      	b.n	80009b6 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	3340      	adds	r3, #64	; 0x40
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff35 	bl	8000828 <lcd_send_cmd>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <updateLCDBuffer>:

void updateLCDBuffer(){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
	if (timer3_flag == 1){
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <updateLCDBuffer+0x7c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d131      	bne.n	8000a3a <updateLCDBuffer+0x72>
		lcd_clear_display();
 80009d6:	f7ff ffca 	bl	800096e <lcd_clear_display>
		char LCDBuffer6[16];
		char LCDBuffer7[16];
		lcd_goto_XY(1, 0);
 80009da:	2100      	movs	r1, #0
 80009dc:	2001      	movs	r0, #1
 80009de:	f7ff ffd0 	bl	8000982 <lcd_goto_XY>
		sprintf(LCDBuffer6, "Road 1: %ds", road1duration/1000);
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <updateLCDBuffer+0x80>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <updateLCDBuffer+0x84>)
 80009e8:	fb82 1203 	smull	r1, r2, r2, r3
 80009ec:	1192      	asrs	r2, r2, #6
 80009ee:	17db      	asrs	r3, r3, #31
 80009f0:	1ad2      	subs	r2, r2, r3
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	4916      	ldr	r1, [pc, #88]	; (8000a50 <updateLCDBuffer+0x88>)
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 ff67 	bl	80038cc <siprintf>
		lcd_send_string(LCDBuffer6);
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff9e 	bl	8000944 <lcd_send_string>
		lcd_goto_XY(2, 0);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	f7ff ffb9 	bl	8000982 <lcd_goto_XY>
		sprintf(LCDBuffer7, "Road 2: %ds", road2duration/1000);
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <updateLCDBuffer+0x8c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <updateLCDBuffer+0x84>)
 8000a16:	fb82 1203 	smull	r1, r2, r2, r3
 8000a1a:	1192      	asrs	r2, r2, #6
 8000a1c:	17db      	asrs	r3, r3, #31
 8000a1e:	1ad2      	subs	r2, r2, r3
 8000a20:	463b      	mov	r3, r7
 8000a22:	490d      	ldr	r1, [pc, #52]	; (8000a58 <updateLCDBuffer+0x90>)
 8000a24:	4618      	mov	r0, r3
 8000a26:	f002 ff51 	bl	80038cc <siprintf>
		lcd_send_string(LCDBuffer7);
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff89 	bl	8000944 <lcd_send_string>
		setTimer3(1000);
 8000a32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a36:	f000 fabf 	bl	8000fb8 <setTimer3>
	}
}
 8000a3a:	bf00      	nop
 8000a3c:	3720      	adds	r7, #32
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000ec 	.word	0x200000ec
 8000a48:	200000c8 	.word	0x200000c8
 8000a4c:	10624dd3 	.word	0x10624dd3
 8000a50:	08004158 	.word	0x08004158
 8000a54:	200000cc 	.word	0x200000cc
 8000a58:	08004164 	.word	0x08004164

08000a5c <updateLCDManualRedBuffer>:

void updateLCDManualRedBuffer(){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
	if (timer3_flag == 1){
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <updateLCDManualRedBuffer+0x70>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d12b      	bne.n	8000ac2 <updateLCDManualRedBuffer+0x66>
		lcd_clear_display();
 8000a6a:	f7ff ff80 	bl	800096e <lcd_clear_display>
		char LCDBuffer[16];
		char LCDBuffer1[16];
		lcd_goto_XY(1, 0);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff ff86 	bl	8000982 <lcd_goto_XY>
		sprintf(LCDBuffer, "Duration: %ds", (currentred/1000));
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <updateLCDManualRedBuffer+0x74>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a16      	ldr	r2, [pc, #88]	; (8000ad4 <updateLCDManualRedBuffer+0x78>)
 8000a7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a80:	1192      	asrs	r2, r2, #6
 8000a82:	17db      	asrs	r3, r3, #31
 8000a84:	1ad2      	subs	r2, r2, r3
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	4913      	ldr	r1, [pc, #76]	; (8000ad8 <updateLCDManualRedBuffer+0x7c>)
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 ff1d 	bl	80038cc <siprintf>
		lcd_send_string(LCDBuffer);
 8000a92:	f107 0310 	add.w	r3, r7, #16
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff54 	bl	8000944 <lcd_send_string>
		lcd_goto_XY(2, 0);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f7ff ff6f 	bl	8000982 <lcd_goto_XY>
		sprintf(LCDBuffer1, "Mode: %d", status);
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <updateLCDManualRedBuffer+0x80>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <updateLCDManualRedBuffer+0x84>)
 8000aac:	4618      	mov	r0, r3
 8000aae:	f002 ff0d 	bl	80038cc <siprintf>
		lcd_send_string(LCDBuffer1);
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff45 	bl	8000944 <lcd_send_string>
		setTimer3(1000);
 8000aba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000abe:	f000 fa7b 	bl	8000fb8 <setTimer3>
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	3720      	adds	r7, #32
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000ec 	.word	0x200000ec
 8000ad0:	20000020 	.word	0x20000020
 8000ad4:	10624dd3 	.word	0x10624dd3
 8000ad8:	08004170 	.word	0x08004170
 8000adc:	200000c4 	.word	0x200000c4
 8000ae0:	08004180 	.word	0x08004180

08000ae4 <updateLCDManualYellowBuffer>:

void updateLCDManualYellowBuffer(){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
	if (timer3_flag == 1){
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <updateLCDManualYellowBuffer+0x70>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d12b      	bne.n	8000b4a <updateLCDManualYellowBuffer+0x66>
		lcd_clear_display();
 8000af2:	f7ff ff3c 	bl	800096e <lcd_clear_display>
		char LCDBuffer2[16];
		char LCDBuffer3[16];
		lcd_goto_XY(1, 0);
 8000af6:	2100      	movs	r1, #0
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff ff42 	bl	8000982 <lcd_goto_XY>
		sprintf(LCDBuffer2, "Duration: %ds", (currentyellow/1000));
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <updateLCDManualYellowBuffer+0x74>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a16      	ldr	r2, [pc, #88]	; (8000b5c <updateLCDManualYellowBuffer+0x78>)
 8000b04:	fb82 1203 	smull	r1, r2, r2, r3
 8000b08:	1192      	asrs	r2, r2, #6
 8000b0a:	17db      	asrs	r3, r3, #31
 8000b0c:	1ad2      	subs	r2, r2, r3
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4913      	ldr	r1, [pc, #76]	; (8000b60 <updateLCDManualYellowBuffer+0x7c>)
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 fed9 	bl	80038cc <siprintf>
		lcd_send_string(LCDBuffer2);
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff10 	bl	8000944 <lcd_send_string>
		lcd_goto_XY(2, 0);
 8000b24:	2100      	movs	r1, #0
 8000b26:	2002      	movs	r0, #2
 8000b28:	f7ff ff2b 	bl	8000982 <lcd_goto_XY>
		sprintf(LCDBuffer3, "Mode: %d", (status));
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <updateLCDManualYellowBuffer+0x80>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	463b      	mov	r3, r7
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <updateLCDManualYellowBuffer+0x84>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 fec9 	bl	80038cc <siprintf>
		lcd_send_string(LCDBuffer3);
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff01 	bl	8000944 <lcd_send_string>
		setTimer3(1000);
 8000b42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b46:	f000 fa37 	bl	8000fb8 <setTimer3>
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	3720      	adds	r7, #32
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200000ec 	.word	0x200000ec
 8000b58:	20000028 	.word	0x20000028
 8000b5c:	10624dd3 	.word	0x10624dd3
 8000b60:	08004170 	.word	0x08004170
 8000b64:	200000c4 	.word	0x200000c4
 8000b68:	08004180 	.word	0x08004180

08000b6c <updateLCDManualGreenBuffer>:

void updateLCDManualGreenBuffer(){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
	if (timer3_flag == 1){
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <updateLCDManualGreenBuffer+0x70>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d12b      	bne.n	8000bd2 <updateLCDManualGreenBuffer+0x66>
		lcd_clear_display();
 8000b7a:	f7ff fef8 	bl	800096e <lcd_clear_display>
		char LCDBuffer4[16];
		char LCDBuffer5[16];
		lcd_goto_XY(1, 0);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2001      	movs	r0, #1
 8000b82:	f7ff fefe 	bl	8000982 <lcd_goto_XY>
		sprintf(LCDBuffer4, "Duration: %ds", (currentgreen/1000));
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <updateLCDManualGreenBuffer+0x74>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a16      	ldr	r2, [pc, #88]	; (8000be4 <updateLCDManualGreenBuffer+0x78>)
 8000b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b90:	1192      	asrs	r2, r2, #6
 8000b92:	17db      	asrs	r3, r3, #31
 8000b94:	1ad2      	subs	r2, r2, r3
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	4913      	ldr	r1, [pc, #76]	; (8000be8 <updateLCDManualGreenBuffer+0x7c>)
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f002 fe95 	bl	80038cc <siprintf>
		lcd_send_string(LCDBuffer4);
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fecc 	bl	8000944 <lcd_send_string>
		lcd_goto_XY(2, 0);
 8000bac:	2100      	movs	r1, #0
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f7ff fee7 	bl	8000982 <lcd_goto_XY>
		sprintf(LCDBuffer5, "Mode: %d", (status));
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <updateLCDManualGreenBuffer+0x80>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	463b      	mov	r3, r7
 8000bba:	490d      	ldr	r1, [pc, #52]	; (8000bf0 <updateLCDManualGreenBuffer+0x84>)
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f002 fe85 	bl	80038cc <siprintf>
		lcd_send_string(LCDBuffer5);
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff febd 	bl	8000944 <lcd_send_string>
		setTimer3(1000);
 8000bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bce:	f000 f9f3 	bl	8000fb8 <setTimer3>
	}
}
 8000bd2:	bf00      	nop
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200000ec 	.word	0x200000ec
 8000be0:	20000024 	.word	0x20000024
 8000be4:	10624dd3 	.word	0x10624dd3
 8000be8:	08004170 	.word	0x08004170
 8000bec:	200000c4 	.word	0x200000c4
 8000bf0:	08004180 	.word	0x08004180

08000bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf8:	f000 fd52 	bl	80016a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfc:	f000 f81a 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c00:	f000 f8fc 	bl	8000dfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c04:	f000 f8d0 	bl	8000da8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c08:	f000 f882 	bl	8000d10 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000c0c:	f000 f852 	bl	8000cb4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000c10:	f7ff fe6a 	bl	80008e8 <lcd_init>
   HAL_TIM_Base_Start_IT (& htim2);
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <main+0x38>)
 8000c16:	f002 f9a7 	bl	8002f68 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   status = INIT;
 8000c1a:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <main+0x3c>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_automatic_run();
 8000c20:	f7ff fb5e 	bl	80002e0 <fsm_automatic_run>
	  fsm_manual_run();
 8000c24:	f7ff fcc8 	bl	80005b8 <fsm_manual_run>
	  fsm_automatic_run();
 8000c28:	e7fa      	b.n	8000c20 <main+0x2c>
 8000c2a:	bf00      	nop
 8000c2c:	20000180 	.word	0x20000180
 8000c30:	200000c4 	.word	0x200000c4

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b090      	sub	sp, #64	; 0x40
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 0318 	add.w	r3, r7, #24
 8000c3e:	2228      	movs	r2, #40	; 0x28
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f002 fe3a 	bl	80038bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5e:	2310      	movs	r3, #16
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c62:	2302      	movs	r3, #2
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c66:	2300      	movs	r3, #0
 8000c68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6e:	f107 0318 	add.w	r3, r7, #24
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fd1a 	bl	80026ac <HAL_RCC_OscConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000c7e:	f000 f95d 	bl	8000f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c82:	230f      	movs	r3, #15
 8000c84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c86:	2302      	movs	r3, #2
 8000c88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f001 ff85 	bl	8002bac <HAL_RCC_ClockConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000ca8:	f000 f948 	bl	8000f3c <Error_Handler>
  }
}
 8000cac:	bf00      	nop
 8000cae:	3740      	adds	r7, #64	; 0x40
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000cba:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <MX_I2C1_Init+0x54>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000cc0:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <MX_I2C1_Init+0x58>)
 8000cc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000cd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000cf2:	f001 f83f 	bl	8001d74 <HAL_I2C_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cfc:	f000 f91e 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2000012c 	.word	0x2000012c
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	000186a0 	.word	0x000186a0

08000d10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	463b      	mov	r3, r7
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d36:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d44:	2209      	movs	r2, #9
 8000d46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d54:	4813      	ldr	r0, [pc, #76]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d56:	f002 f8b7 	bl	8002ec8 <HAL_TIM_Base_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d60:	f000 f8ec 	bl	8000f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d72:	f002 fa3b 	bl	80031ec <HAL_TIM_ConfigClockSource>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d7c:	f000 f8de 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d80:	2300      	movs	r3, #0
 8000d82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d88:	463b      	mov	r3, r7
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_TIM2_Init+0x94>)
 8000d8e:	f002 fc1d 	bl	80035cc <HAL_TIMEx_MasterConfigSynchronization>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d98:	f000 f8d0 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000180 	.word	0x20000180

08000da8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <MX_USART2_UART_Init+0x50>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000de0:	f002 fc64 	bl	80036ac <HAL_UART_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dea:	f000 f8a7 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200001c8 	.word	0x200001c8
 8000df8:	40004400 	.word	0x40004400

08000dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e10:	4b45      	ldr	r3, [pc, #276]	; (8000f28 <MX_GPIO_Init+0x12c>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a44      	ldr	r2, [pc, #272]	; (8000f28 <MX_GPIO_Init+0x12c>)
 8000e16:	f043 0310 	orr.w	r3, r3, #16
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b42      	ldr	r3, [pc, #264]	; (8000f28 <MX_GPIO_Init+0x12c>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e28:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <MX_GPIO_Init+0x12c>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a3e      	ldr	r2, [pc, #248]	; (8000f28 <MX_GPIO_Init+0x12c>)
 8000e2e:	f043 0320 	orr.w	r3, r3, #32
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <MX_GPIO_Init+0x12c>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f003 0320 	and.w	r3, r3, #32
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b39      	ldr	r3, [pc, #228]	; (8000f28 <MX_GPIO_Init+0x12c>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a38      	ldr	r2, [pc, #224]	; (8000f28 <MX_GPIO_Init+0x12c>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <MX_GPIO_Init+0x12c>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e58:	4b33      	ldr	r3, [pc, #204]	; (8000f28 <MX_GPIO_Init+0x12c>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a32      	ldr	r2, [pc, #200]	; (8000f28 <MX_GPIO_Init+0x12c>)
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b30      	ldr	r3, [pc, #192]	; (8000f28 <MX_GPIO_Init+0x12c>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0308 	and.w	r3, r3, #8
 8000e6c:	603b      	str	r3, [r7, #0]
 8000e6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000e76:	482d      	ldr	r0, [pc, #180]	; (8000f2c <MX_GPIO_Init+0x130>)
 8000e78:	f000 ff41 	bl	8001cfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000e82:	482b      	ldr	r0, [pc, #172]	; (8000f30 <MX_GPIO_Init+0x134>)
 8000e84:	f000 ff3b 	bl	8001cfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e8e:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <MX_GPIO_Init+0x138>)
 8000e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4826      	ldr	r0, [pc, #152]	; (8000f38 <MX_GPIO_Init+0x13c>)
 8000e9e:	f000 fd93 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8000ea2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	481c      	ldr	r0, [pc, #112]	; (8000f2c <MX_GPIO_Init+0x130>)
 8000ebc:	f000 fd84 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8000ec0:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4815      	ldr	r0, [pc, #84]	; (8000f30 <MX_GPIO_Init+0x134>)
 8000eda:	f000 fd75 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4811      	ldr	r0, [pc, #68]	; (8000f38 <MX_GPIO_Init+0x13c>)
 8000ef2:	f000 fd69 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ef6:	2360      	movs	r3, #96	; 0x60
 8000ef8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4619      	mov	r1, r3
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <MX_GPIO_Init+0x134>)
 8000f0a:	f000 fd5d 	bl	80019c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	2028      	movs	r0, #40	; 0x28
 8000f14:	f000 fd21 	bl	800195a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f18:	2028      	movs	r0, #40	; 0x28
 8000f1a:	f000 fd3a 	bl	8001992 <HAL_NVIC_EnableIRQ>

}
 8000f1e:	bf00      	nop
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010800 	.word	0x40010800
 8000f30:	40010c00 	.word	0x40010c00
 8000f34:	10110000 	.word	0x10110000
 8000f38:	40011000 	.word	0x40011000

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <Error_Handler+0x8>
	...

08000f48 <setTimerRoad1>:
int timer2_flag = 0;
int timer3_flag = 0;



void setTimerRoad1(int duration){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	timerRoad1_counter = duration/timercycle;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <setTimerRoad1+0x2c>)
 8000f54:	fb82 1203 	smull	r1, r2, r2, r3
 8000f58:	1092      	asrs	r2, r2, #2
 8000f5a:	17db      	asrs	r3, r3, #31
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <setTimerRoad1+0x30>)
 8000f60:	6013      	str	r3, [r2, #0]
	timerRoad1_flag = 0;
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <setTimerRoad1+0x34>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	66666667 	.word	0x66666667
 8000f78:	200000d8 	.word	0x200000d8
 8000f7c:	200000e4 	.word	0x200000e4

08000f80 <setTimerRoad2>:

void setTimerRoad2(int duration){
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	timerRoad2_counter = duration/timercycle;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <setTimerRoad2+0x2c>)
 8000f8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f90:	1092      	asrs	r2, r2, #2
 8000f92:	17db      	asrs	r3, r3, #31
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <setTimerRoad2+0x30>)
 8000f98:	6013      	str	r3, [r2, #0]
	timerRoad2_flag = 0;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <setTimerRoad2+0x34>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	66666667 	.word	0x66666667
 8000fb0:	200000dc 	.word	0x200000dc
 8000fb4:	200000e8 	.word	0x200000e8

08000fb8 <setTimer3>:

//void setTimer2(){
//	timer2_counter = (1000 / 4) / timercycle;
//	timer2_flag = 0;
//}
void setTimer3(int duration){
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/timercycle;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <setTimer3+0x2c>)
 8000fc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc8:	1092      	asrs	r2, r2, #2
 8000fca:	17db      	asrs	r3, r3, #31
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <setTimer3+0x30>)
 8000fd0:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <setTimer3+0x34>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	66666667 	.word	0x66666667
 8000fe8:	200000e0 	.word	0x200000e0
 8000fec:	200000ec 	.word	0x200000ec

08000ff0 <timerRun>:
void timerRun(){
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	if (timerRoad1_counter > 0){
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <timerRun+0x80>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	dd0b      	ble.n	8001014 <timerRun+0x24>
		timerRoad1_counter--;
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <timerRun+0x80>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3b01      	subs	r3, #1
 8001002:	4a1b      	ldr	r2, [pc, #108]	; (8001070 <timerRun+0x80>)
 8001004:	6013      	str	r3, [r2, #0]
		if(timerRoad1_counter <= 0){
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <timerRun+0x80>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	dc02      	bgt.n	8001014 <timerRun+0x24>
			timerRoad1_flag = 1;
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <timerRun+0x84>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]
		}
	}
	if (timerRoad2_counter > 0){
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <timerRun+0x88>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	dd0b      	ble.n	8001034 <timerRun+0x44>
		timerRoad2_counter--;
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <timerRun+0x88>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3b01      	subs	r3, #1
 8001022:	4a15      	ldr	r2, [pc, #84]	; (8001078 <timerRun+0x88>)
 8001024:	6013      	str	r3, [r2, #0]
		if(timerRoad2_counter <= 0){
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <timerRun+0x88>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	dc02      	bgt.n	8001034 <timerRun+0x44>
			timerRoad2_flag = 1;
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <timerRun+0x8c>)
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]
//		road2duration-=10;
//		if(timer2_counter <= 0){
//			timer2_flag = 1;
//		}
//	}
	if (timer3_counter > 0){
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <timerRun+0x90>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	dd15      	ble.n	8001068 <timerRun+0x78>
		timer3_counter--;
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <timerRun+0x90>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3b01      	subs	r3, #1
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <timerRun+0x90>)
 8001044:	6013      	str	r3, [r2, #0]
		road1duration-=10;
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <timerRun+0x94>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3b0a      	subs	r3, #10
 800104c:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <timerRun+0x94>)
 800104e:	6013      	str	r3, [r2, #0]
		road2duration-=10;
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <timerRun+0x98>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3b0a      	subs	r3, #10
 8001056:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <timerRun+0x98>)
 8001058:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <timerRun+0x90>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	dc02      	bgt.n	8001068 <timerRun+0x78>
			timer3_flag = 1;
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <timerRun+0x9c>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	200000d8 	.word	0x200000d8
 8001074:	200000e4 	.word	0x200000e4
 8001078:	200000dc 	.word	0x200000dc
 800107c:	200000e8 	.word	0x200000e8
 8001080:	200000e0 	.word	0x200000e0
 8001084:	200000c8 	.word	0x200000c8
 8001088:	200000cc 	.word	0x200000cc
 800108c:	200000ec 	.word	0x200000ec

08001090 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8001098:	f7ff f872 	bl	8000180 <getKeyInput>
	timerRun();
 800109c:	f7ff ffa8 	bl	8000ff0 <timerRun>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_MspInit+0x5c>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <HAL_MspInit+0x5c>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6193      	str	r3, [r2, #24]
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_MspInit+0x5c>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_MspInit+0x5c>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <HAL_MspInit+0x5c>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	61d3      	str	r3, [r2, #28]
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_MspInit+0x5c>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_MspInit+0x60>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_MspInit+0x60>)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	40021000 	.word	0x40021000
 8001108:	40010000 	.word	0x40010000

0800110c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_I2C_MspInit+0x90>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d132      	bne.n	8001192 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <HAL_I2C_MspInit+0x94>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <HAL_I2C_MspInit+0x94>)
 8001132:	f043 0308 	orr.w	r3, r3, #8
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <HAL_I2C_MspInit+0x94>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001144:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114a:	2312      	movs	r3, #18
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4812      	ldr	r0, [pc, #72]	; (80011a4 <HAL_I2C_MspInit+0x98>)
 800115a:	f000 fc35 	bl	80019c8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_I2C_MspInit+0x9c>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	f043 0302 	orr.w	r3, r3, #2
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
 8001174:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <HAL_I2C_MspInit+0x9c>)
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_I2C_MspInit+0x94>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <HAL_I2C_MspInit+0x94>)
 8001180:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001184:	61d3      	str	r3, [r2, #28]
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_I2C_MspInit+0x94>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40005400 	.word	0x40005400
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40010c00 	.word	0x40010c00
 80011a8:	40010000 	.word	0x40010000

080011ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011bc:	d113      	bne.n	80011e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_TIM_Base_MspInit+0x44>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <HAL_TIM_Base_MspInit+0x44>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	61d3      	str	r3, [r2, #28]
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_TIM_Base_MspInit+0x44>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	201c      	movs	r0, #28
 80011dc:	f000 fbbd 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011e0:	201c      	movs	r0, #28
 80011e2:	f000 fbd6 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000

080011f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a15      	ldr	r2, [pc, #84]	; (8001264 <HAL_UART_MspInit+0x70>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d123      	bne.n	800125c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_UART_MspInit+0x74>)
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	4a13      	ldr	r2, [pc, #76]	; (8001268 <HAL_UART_MspInit+0x74>)
 800121a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121e:	61d3      	str	r3, [r2, #28]
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_UART_MspInit+0x74>)
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_UART_MspInit+0x74>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <HAL_UART_MspInit+0x74>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_UART_MspInit+0x74>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001244:	230c      	movs	r3, #12
 8001246:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2302      	movs	r3, #2
 800124e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4619      	mov	r1, r3
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <HAL_UART_MspInit+0x78>)
 8001258:	f000 fbb6 	bl	80019c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800125c:	bf00      	nop
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40004400 	.word	0x40004400
 8001268:	40021000 	.word	0x40021000
 800126c:	40010800 	.word	0x40010800

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <NMI_Handler+0x4>

08001276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <HardFault_Handler+0x4>

0800127c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <MemManage_Handler+0x4>

08001282 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <UsageFault_Handler+0x4>

0800128e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b6:	f000 fa39 	bl	800172c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <TIM2_IRQHandler+0x10>)
 80012c6:	f001 fea1 	bl	800300c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000180 	.word	0x20000180

080012d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012dc:	f000 fd28 	bl	8001d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ec:	4a14      	ldr	r2, [pc, #80]	; (8001340 <_sbrk+0x5c>)
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <_sbrk+0x60>)
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <_sbrk+0x64>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <_sbrk+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	429a      	cmp	r2, r3
 8001312:	d207      	bcs.n	8001324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001314:	f002 faa8 	bl	8003868 <__errno>
 8001318:	4603      	mov	r3, r0
 800131a:	220c      	movs	r2, #12
 800131c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e009      	b.n	8001338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <_sbrk+0x64>)
 8001334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20005000 	.word	0x20005000
 8001344:	00000400 	.word	0x00000400
 8001348:	200000f0 	.word	0x200000f0
 800134c:	20000228 	.word	0x20000228

08001350 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <traffic_1red_2red>:
 *      Author: ASUS
 */

#include <traffic.h>

void traffic_1red_2red(){
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	2110      	movs	r1, #16
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <traffic_1red_2red+0x38>)
 8001366:	f000 fcca 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800136a:	2201      	movs	r2, #1
 800136c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001370:	4808      	ldr	r0, [pc, #32]	; (8001394 <traffic_1red_2red+0x38>)
 8001372:	f000 fcc4 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137c:	4806      	ldr	r0, [pc, #24]	; (8001398 <traffic_1red_2red+0x3c>)
 800137e:	f000 fcbe 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001388:	4803      	ldr	r0, [pc, #12]	; (8001398 <traffic_1red_2red+0x3c>)
 800138a:	f000 fcb8 	bl	8001cfe <HAL_GPIO_WritePin>
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40010c00 	.word	0x40010c00
 8001398:	40010800 	.word	0x40010800

0800139c <traffic_1red_2green>:
void traffic_1red_2green(){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2110      	movs	r1, #16
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <traffic_1red_2green+0x38>)
 80013a6:	f000 fcaa 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b0:	4808      	ldr	r0, [pc, #32]	; (80013d4 <traffic_1red_2green+0x38>)
 80013b2:	f000 fca4 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013bc:	4806      	ldr	r0, [pc, #24]	; (80013d8 <traffic_1red_2green+0x3c>)
 80013be:	f000 fc9e 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c8:	4803      	ldr	r0, [pc, #12]	; (80013d8 <traffic_1red_2green+0x3c>)
 80013ca:	f000 fc98 	bl	8001cfe <HAL_GPIO_WritePin>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40010c00 	.word	0x40010c00
 80013d8:	40010800 	.word	0x40010800

080013dc <traffic_1red_2yellow>:
void traffic_1red_2yellow(){
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	2110      	movs	r1, #16
 80013e4:	480b      	ldr	r0, [pc, #44]	; (8001414 <traffic_1red_2yellow+0x38>)
 80013e6:	f000 fc8a 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013f0:	4808      	ldr	r0, [pc, #32]	; (8001414 <traffic_1red_2yellow+0x38>)
 80013f2:	f000 fc84 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013fc:	4806      	ldr	r0, [pc, #24]	; (8001418 <traffic_1red_2yellow+0x3c>)
 80013fe:	f000 fc7e 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <traffic_1red_2yellow+0x3c>)
 800140a:	f000 fc78 	bl	8001cfe <HAL_GPIO_WritePin>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40010c00 	.word	0x40010c00
 8001418:	40010800 	.word	0x40010800

0800141c <traffic_1green_2red>:
void traffic_1green_2red(){
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001420:	2201      	movs	r2, #1
 8001422:	2110      	movs	r1, #16
 8001424:	480b      	ldr	r0, [pc, #44]	; (8001454 <traffic_1green_2red+0x38>)
 8001426:	f000 fc6a 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001430:	4808      	ldr	r0, [pc, #32]	; (8001454 <traffic_1green_2red+0x38>)
 8001432:	f000 fc64 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143c:	4806      	ldr	r0, [pc, #24]	; (8001458 <traffic_1green_2red+0x3c>)
 800143e:	f000 fc5e 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001448:	4803      	ldr	r0, [pc, #12]	; (8001458 <traffic_1green_2red+0x3c>)
 800144a:	f000 fc58 	bl	8001cfe <HAL_GPIO_WritePin>
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40010c00 	.word	0x40010c00
 8001458:	40010800 	.word	0x40010800

0800145c <traffic_1yellow_2red>:
void traffic_1yellow_2red(){
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	2110      	movs	r1, #16
 8001464:	480b      	ldr	r0, [pc, #44]	; (8001494 <traffic_1yellow_2red+0x38>)
 8001466:	f000 fc4a 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001470:	4808      	ldr	r0, [pc, #32]	; (8001494 <traffic_1yellow_2red+0x38>)
 8001472:	f000 fc44 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800147c:	4806      	ldr	r0, [pc, #24]	; (8001498 <traffic_1yellow_2red+0x3c>)
 800147e:	f000 fc3e 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <traffic_1yellow_2red+0x3c>)
 800148a:	f000 fc38 	bl	8001cfe <HAL_GPIO_WritePin>
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40010c00 	.word	0x40010c00
 8001498:	40010800 	.word	0x40010800

0800149c <traffic_turnoffall>:
void traffic_turnoffall(){
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2110      	movs	r1, #16
 80014a4:	480b      	ldr	r0, [pc, #44]	; (80014d4 <traffic_turnoffall+0x38>)
 80014a6:	f000 fc2a 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <traffic_turnoffall+0x38>)
 80014b2:	f000 fc24 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014bc:	4806      	ldr	r0, [pc, #24]	; (80014d8 <traffic_turnoffall+0x3c>)
 80014be:	f000 fc1e 	bl	8001cfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <traffic_turnoffall+0x3c>)
 80014ca:	f000 fc18 	bl	8001cfe <HAL_GPIO_WritePin>
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40010c00 	.word	0x40010c00
 80014d8:	40010800 	.word	0x40010800

080014dc <traffic_manualred>:

void traffic_manualred(){
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_SET){
 80014e0:	2110      	movs	r1, #16
 80014e2:	481b      	ldr	r0, [pc, #108]	; (8001550 <traffic_manualred+0x74>)
 80014e4:	f000 fbf4 	bl	8001cd0 <HAL_GPIO_ReadPin>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d117      	bne.n	800151e <traffic_manualred+0x42>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2110      	movs	r1, #16
 80014f2:	4817      	ldr	r0, [pc, #92]	; (8001550 <traffic_manualred+0x74>)
 80014f4:	f000 fc03 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014fe:	4814      	ldr	r0, [pc, #80]	; (8001550 <traffic_manualred+0x74>)
 8001500:	f000 fbfd 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800150a:	4812      	ldr	r0, [pc, #72]	; (8001554 <traffic_manualred+0x78>)
 800150c:	f000 fbf7 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001516:	480f      	ldr	r0, [pc, #60]	; (8001554 <traffic_manualred+0x78>)
 8001518:	f000 fbf1 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
	}
}
 800151c:	e016      	b.n	800154c <traffic_manualred+0x70>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800151e:	2201      	movs	r2, #1
 8001520:	2110      	movs	r1, #16
 8001522:	480b      	ldr	r0, [pc, #44]	; (8001550 <traffic_manualred+0x74>)
 8001524:	f000 fbeb 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152e:	4808      	ldr	r0, [pc, #32]	; (8001550 <traffic_manualred+0x74>)
 8001530:	f000 fbe5 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <traffic_manualred+0x78>)
 800153c:	f000 fbdf 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001546:	4803      	ldr	r0, [pc, #12]	; (8001554 <traffic_manualred+0x78>)
 8001548:	f000 fbd9 	bl	8001cfe <HAL_GPIO_WritePin>
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40010c00 	.word	0x40010c00
 8001554:	40010800 	.word	0x40010800

08001558 <traffic_manualgreen>:
void traffic_manualgreen(){
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == GPIO_PIN_SET){
 800155c:	2110      	movs	r1, #16
 800155e:	481b      	ldr	r0, [pc, #108]	; (80015cc <traffic_manualgreen+0x74>)
 8001560:	f000 fbb6 	bl	8001cd0 <HAL_GPIO_ReadPin>
 8001564:	4603      	mov	r3, r0
 8001566:	2b01      	cmp	r3, #1
 8001568:	d117      	bne.n	800159a <traffic_manualgreen+0x42>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2110      	movs	r1, #16
 800156e:	4817      	ldr	r0, [pc, #92]	; (80015cc <traffic_manualgreen+0x74>)
 8001570:	f000 fbc5 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800157a:	4814      	ldr	r0, [pc, #80]	; (80015cc <traffic_manualgreen+0x74>)
 800157c:	f000 fbbf 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001586:	4812      	ldr	r0, [pc, #72]	; (80015d0 <traffic_manualgreen+0x78>)
 8001588:	f000 fbb9 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001592:	480f      	ldr	r0, [pc, #60]	; (80015d0 <traffic_manualgreen+0x78>)
 8001594:	f000 fbb3 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
	}
}
 8001598:	e016      	b.n	80015c8 <traffic_manualgreen+0x70>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800159a:	2201      	movs	r2, #1
 800159c:	2110      	movs	r1, #16
 800159e:	480b      	ldr	r0, [pc, #44]	; (80015cc <traffic_manualgreen+0x74>)
 80015a0:	f000 fbad 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015aa:	4808      	ldr	r0, [pc, #32]	; (80015cc <traffic_manualgreen+0x74>)
 80015ac:	f000 fba7 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <traffic_manualgreen+0x78>)
 80015b8:	f000 fba1 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c2:	4803      	ldr	r0, [pc, #12]	; (80015d0 <traffic_manualgreen+0x78>)
 80015c4:	f000 fb9b 	bl	8001cfe <HAL_GPIO_WritePin>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40010c00 	.word	0x40010c00
 80015d0:	40010800 	.word	0x40010800

080015d4 <traffic_manualyellow>:
void traffic_manualyellow(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET){
 80015d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015dc:	481b      	ldr	r0, [pc, #108]	; (800164c <traffic_manualyellow+0x78>)
 80015de:	f000 fb77 	bl	8001cd0 <HAL_GPIO_ReadPin>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d117      	bne.n	8001618 <traffic_manualyellow+0x44>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2110      	movs	r1, #16
 80015ec:	4817      	ldr	r0, [pc, #92]	; (800164c <traffic_manualyellow+0x78>)
 80015ee:	f000 fb86 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f8:	4814      	ldr	r0, [pc, #80]	; (800164c <traffic_manualyellow+0x78>)
 80015fa:	f000 fb80 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001604:	4812      	ldr	r0, [pc, #72]	; (8001650 <traffic_manualyellow+0x7c>)
 8001606:	f000 fb7a 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001610:	480f      	ldr	r0, [pc, #60]	; (8001650 <traffic_manualyellow+0x7c>)
 8001612:	f000 fb74 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
	}
}
 8001616:	e016      	b.n	8001646 <traffic_manualyellow+0x72>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2110      	movs	r1, #16
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <traffic_manualyellow+0x78>)
 800161e:	f000 fb6e 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001628:	4808      	ldr	r0, [pc, #32]	; (800164c <traffic_manualyellow+0x78>)
 800162a:	f000 fb68 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001634:	4806      	ldr	r0, [pc, #24]	; (8001650 <traffic_manualyellow+0x7c>)
 8001636:	f000 fb62 	bl	8001cfe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800163a:	2201      	movs	r2, #1
 800163c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <traffic_manualyellow+0x7c>)
 8001642:	f000 fb5c 	bl	8001cfe <HAL_GPIO_WritePin>
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40010c00 	.word	0x40010c00
 8001650:	40010800 	.word	0x40010800

08001654 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001654:	f7ff fe7c 	bl	8001350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800165a:	490c      	ldr	r1, [pc, #48]	; (800168c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800165c:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <LoopFillZerobss+0x16>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001670:	4c09      	ldr	r4, [pc, #36]	; (8001698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f002 f8f9 	bl	8003874 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001682:	f7ff fab7 	bl	8000bf4 <main>
  bx lr
 8001686:	4770      	bx	lr
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001690:	080041f4 	.word	0x080041f4
  ldr r2, =_sbss
 8001694:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001698:	20000224 	.word	0x20000224

0800169c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC1_2_IRQHandler>
	...

080016a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_Init+0x28>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <HAL_Init+0x28>)
 80016aa:	f043 0310 	orr.w	r3, r3, #16
 80016ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 f947 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b6:	2000      	movs	r0, #0
 80016b8:	f000 f808 	bl	80016cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016bc:	f7ff fcf4 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40022000 	.word	0x40022000

080016cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x54>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_InitTick+0x58>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f95f 	bl	80019ae <HAL_SYSTICK_Config>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00e      	b.n	8001718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d80a      	bhi.n	8001716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001700:	2200      	movs	r2, #0
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f000 f927 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800170c:	4a06      	ldr	r2, [pc, #24]	; (8001728 <HAL_InitTick+0x5c>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e000      	b.n	8001718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2000002c 	.word	0x2000002c
 8001724:	20000034 	.word	0x20000034
 8001728:	20000030 	.word	0x20000030

0800172c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_IncTick+0x1c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_IncTick+0x20>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a03      	ldr	r2, [pc, #12]	; (800174c <HAL_IncTick+0x20>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	20000034 	.word	0x20000034
 800174c:	20000210 	.word	0x20000210

08001750 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b02      	ldr	r3, [pc, #8]	; (8001760 <HAL_GetTick+0x10>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	20000210 	.word	0x20000210

08001764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff fff0 	bl	8001750 <HAL_GetTick>
 8001770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177c:	d005      	beq.n	800178a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_Delay+0x44>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800178a:	bf00      	nop
 800178c:	f7ff ffe0 	bl	8001750 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8f7      	bhi.n	800178c <HAL_Delay+0x28>
  {
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000034 	.word	0x20000034

080017ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db0b      	blt.n	800183a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4906      	ldr	r1, [pc, #24]	; (8001844 <__NVIC_EnableIRQ+0x34>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2001      	movs	r0, #1
 8001832:	fa00 f202 	lsl.w	r2, r0, r2
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f7ff ff90 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff2d 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff42 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff90 	bl	800189c <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5f 	bl	8001848 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff35 	bl	8001810 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa2 	bl	8001900 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b08b      	sub	sp, #44	; 0x2c
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019da:	e169      	b.n	8001cb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019dc:	2201      	movs	r2, #1
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	f040 8158 	bne.w	8001caa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	4a9a      	ldr	r2, [pc, #616]	; (8001c68 <HAL_GPIO_Init+0x2a0>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d05e      	beq.n	8001ac2 <HAL_GPIO_Init+0xfa>
 8001a04:	4a98      	ldr	r2, [pc, #608]	; (8001c68 <HAL_GPIO_Init+0x2a0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d875      	bhi.n	8001af6 <HAL_GPIO_Init+0x12e>
 8001a0a:	4a98      	ldr	r2, [pc, #608]	; (8001c6c <HAL_GPIO_Init+0x2a4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d058      	beq.n	8001ac2 <HAL_GPIO_Init+0xfa>
 8001a10:	4a96      	ldr	r2, [pc, #600]	; (8001c6c <HAL_GPIO_Init+0x2a4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d86f      	bhi.n	8001af6 <HAL_GPIO_Init+0x12e>
 8001a16:	4a96      	ldr	r2, [pc, #600]	; (8001c70 <HAL_GPIO_Init+0x2a8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d052      	beq.n	8001ac2 <HAL_GPIO_Init+0xfa>
 8001a1c:	4a94      	ldr	r2, [pc, #592]	; (8001c70 <HAL_GPIO_Init+0x2a8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d869      	bhi.n	8001af6 <HAL_GPIO_Init+0x12e>
 8001a22:	4a94      	ldr	r2, [pc, #592]	; (8001c74 <HAL_GPIO_Init+0x2ac>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d04c      	beq.n	8001ac2 <HAL_GPIO_Init+0xfa>
 8001a28:	4a92      	ldr	r2, [pc, #584]	; (8001c74 <HAL_GPIO_Init+0x2ac>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d863      	bhi.n	8001af6 <HAL_GPIO_Init+0x12e>
 8001a2e:	4a92      	ldr	r2, [pc, #584]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d046      	beq.n	8001ac2 <HAL_GPIO_Init+0xfa>
 8001a34:	4a90      	ldr	r2, [pc, #576]	; (8001c78 <HAL_GPIO_Init+0x2b0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d85d      	bhi.n	8001af6 <HAL_GPIO_Init+0x12e>
 8001a3a:	2b12      	cmp	r3, #18
 8001a3c:	d82a      	bhi.n	8001a94 <HAL_GPIO_Init+0xcc>
 8001a3e:	2b12      	cmp	r3, #18
 8001a40:	d859      	bhi.n	8001af6 <HAL_GPIO_Init+0x12e>
 8001a42:	a201      	add	r2, pc, #4	; (adr r2, 8001a48 <HAL_GPIO_Init+0x80>)
 8001a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a48:	08001ac3 	.word	0x08001ac3
 8001a4c:	08001a9d 	.word	0x08001a9d
 8001a50:	08001aaf 	.word	0x08001aaf
 8001a54:	08001af1 	.word	0x08001af1
 8001a58:	08001af7 	.word	0x08001af7
 8001a5c:	08001af7 	.word	0x08001af7
 8001a60:	08001af7 	.word	0x08001af7
 8001a64:	08001af7 	.word	0x08001af7
 8001a68:	08001af7 	.word	0x08001af7
 8001a6c:	08001af7 	.word	0x08001af7
 8001a70:	08001af7 	.word	0x08001af7
 8001a74:	08001af7 	.word	0x08001af7
 8001a78:	08001af7 	.word	0x08001af7
 8001a7c:	08001af7 	.word	0x08001af7
 8001a80:	08001af7 	.word	0x08001af7
 8001a84:	08001af7 	.word	0x08001af7
 8001a88:	08001af7 	.word	0x08001af7
 8001a8c:	08001aa5 	.word	0x08001aa5
 8001a90:	08001ab9 	.word	0x08001ab9
 8001a94:	4a79      	ldr	r2, [pc, #484]	; (8001c7c <HAL_GPIO_Init+0x2b4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d013      	beq.n	8001ac2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a9a:	e02c      	b.n	8001af6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	623b      	str	r3, [r7, #32]
          break;
 8001aa2:	e029      	b.n	8001af8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	623b      	str	r3, [r7, #32]
          break;
 8001aac:	e024      	b.n	8001af8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	3308      	adds	r3, #8
 8001ab4:	623b      	str	r3, [r7, #32]
          break;
 8001ab6:	e01f      	b.n	8001af8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	330c      	adds	r3, #12
 8001abe:	623b      	str	r3, [r7, #32]
          break;
 8001ac0:	e01a      	b.n	8001af8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d102      	bne.n	8001ad0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aca:	2304      	movs	r3, #4
 8001acc:	623b      	str	r3, [r7, #32]
          break;
 8001ace:	e013      	b.n	8001af8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d105      	bne.n	8001ae4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	611a      	str	r2, [r3, #16]
          break;
 8001ae2:	e009      	b.n	8001af8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	615a      	str	r2, [r3, #20]
          break;
 8001aee:	e003      	b.n	8001af8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001af0:	2300      	movs	r3, #0
 8001af2:	623b      	str	r3, [r7, #32]
          break;
 8001af4:	e000      	b.n	8001af8 <HAL_GPIO_Init+0x130>
          break;
 8001af6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2bff      	cmp	r3, #255	; 0xff
 8001afc:	d801      	bhi.n	8001b02 <HAL_GPIO_Init+0x13a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	e001      	b.n	8001b06 <HAL_GPIO_Init+0x13e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3304      	adds	r3, #4
 8001b06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	2bff      	cmp	r3, #255	; 0xff
 8001b0c:	d802      	bhi.n	8001b14 <HAL_GPIO_Init+0x14c>
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	e002      	b.n	8001b1a <HAL_GPIO_Init+0x152>
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	3b08      	subs	r3, #8
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	210f      	movs	r1, #15
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	6a39      	ldr	r1, [r7, #32]
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	431a      	orrs	r2, r3
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 80b1 	beq.w	8001caa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b48:	4b4d      	ldr	r3, [pc, #308]	; (8001c80 <HAL_GPIO_Init+0x2b8>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a4c      	ldr	r2, [pc, #304]	; (8001c80 <HAL_GPIO_Init+0x2b8>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b4a      	ldr	r3, [pc, #296]	; (8001c80 <HAL_GPIO_Init+0x2b8>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b60:	4a48      	ldr	r2, [pc, #288]	; (8001c84 <HAL_GPIO_Init+0x2bc>)
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	3302      	adds	r3, #2
 8001b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	220f      	movs	r2, #15
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	4013      	ands	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a40      	ldr	r2, [pc, #256]	; (8001c88 <HAL_GPIO_Init+0x2c0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d013      	beq.n	8001bb4 <HAL_GPIO_Init+0x1ec>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a3f      	ldr	r2, [pc, #252]	; (8001c8c <HAL_GPIO_Init+0x2c4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00d      	beq.n	8001bb0 <HAL_GPIO_Init+0x1e8>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a3e      	ldr	r2, [pc, #248]	; (8001c90 <HAL_GPIO_Init+0x2c8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d007      	beq.n	8001bac <HAL_GPIO_Init+0x1e4>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a3d      	ldr	r2, [pc, #244]	; (8001c94 <HAL_GPIO_Init+0x2cc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d101      	bne.n	8001ba8 <HAL_GPIO_Init+0x1e0>
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e006      	b.n	8001bb6 <HAL_GPIO_Init+0x1ee>
 8001ba8:	2304      	movs	r3, #4
 8001baa:	e004      	b.n	8001bb6 <HAL_GPIO_Init+0x1ee>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e002      	b.n	8001bb6 <HAL_GPIO_Init+0x1ee>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <HAL_GPIO_Init+0x1ee>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb8:	f002 0203 	and.w	r2, r2, #3
 8001bbc:	0092      	lsls	r2, r2, #2
 8001bbe:	4093      	lsls	r3, r2
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bc6:	492f      	ldr	r1, [pc, #188]	; (8001c84 <HAL_GPIO_Init+0x2bc>)
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001be0:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <HAL_GPIO_Init+0x2d0>)
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	492c      	ldr	r1, [pc, #176]	; (8001c98 <HAL_GPIO_Init+0x2d0>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	608b      	str	r3, [r1, #8]
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bee:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <HAL_GPIO_Init+0x2d0>)
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	4928      	ldr	r1, [pc, #160]	; (8001c98 <HAL_GPIO_Init+0x2d0>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d006      	beq.n	8001c16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c08:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <HAL_GPIO_Init+0x2d0>)
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	4922      	ldr	r1, [pc, #136]	; (8001c98 <HAL_GPIO_Init+0x2d0>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	60cb      	str	r3, [r1, #12]
 8001c14:	e006      	b.n	8001c24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <HAL_GPIO_Init+0x2d0>)
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	491e      	ldr	r1, [pc, #120]	; (8001c98 <HAL_GPIO_Init+0x2d0>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d006      	beq.n	8001c3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <HAL_GPIO_Init+0x2d0>)
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4918      	ldr	r1, [pc, #96]	; (8001c98 <HAL_GPIO_Init+0x2d0>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <HAL_GPIO_Init+0x2d0>)
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	4914      	ldr	r1, [pc, #80]	; (8001c98 <HAL_GPIO_Init+0x2d0>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d021      	beq.n	8001c9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_GPIO_Init+0x2d0>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	490e      	ldr	r1, [pc, #56]	; (8001c98 <HAL_GPIO_Init+0x2d0>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
 8001c64:	e021      	b.n	8001caa <HAL_GPIO_Init+0x2e2>
 8001c66:	bf00      	nop
 8001c68:	10320000 	.word	0x10320000
 8001c6c:	10310000 	.word	0x10310000
 8001c70:	10220000 	.word	0x10220000
 8001c74:	10210000 	.word	0x10210000
 8001c78:	10120000 	.word	0x10120000
 8001c7c:	10110000 	.word	0x10110000
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40010000 	.word	0x40010000
 8001c88:	40010800 	.word	0x40010800
 8001c8c:	40010c00 	.word	0x40010c00
 8001c90:	40011000 	.word	0x40011000
 8001c94:	40011400 	.word	0x40011400
 8001c98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	4909      	ldr	r1, [pc, #36]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	3301      	adds	r3, #1
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f47f ae8e 	bne.w	80019dc <HAL_GPIO_Init+0x14>
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	372c      	adds	r7, #44	; 0x2c
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	40010400 	.word	0x40010400

08001cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e001      	b.n	8001cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	460b      	mov	r3, r1
 8001d08:	807b      	strh	r3, [r7, #2]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d0e:	787b      	ldrb	r3, [r7, #1]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d14:	887a      	ldrh	r2, [r7, #2]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d1a:	e003      	b.n	8001d24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d1c:	887b      	ldrh	r3, [r7, #2]
 8001d1e:	041a      	lsls	r2, r3, #16
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	611a      	str	r2, [r3, #16]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 f806 	bl	8001d60 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40010400 	.word	0x40010400

08001d60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e12b      	b.n	8001fde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff f9b6 	bl	800110c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2224      	movs	r2, #36	; 0x24
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dd8:	f001 f830 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8001ddc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a81      	ldr	r2, [pc, #516]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d807      	bhi.n	8001df8 <HAL_I2C_Init+0x84>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4a80      	ldr	r2, [pc, #512]	; (8001fec <HAL_I2C_Init+0x278>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	bf94      	ite	ls
 8001df0:	2301      	movls	r3, #1
 8001df2:	2300      	movhi	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	e006      	b.n	8001e06 <HAL_I2C_Init+0x92>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4a7d      	ldr	r2, [pc, #500]	; (8001ff0 <HAL_I2C_Init+0x27c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	bf94      	ite	ls
 8001e00:	2301      	movls	r3, #1
 8001e02:	2300      	movhi	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0e7      	b.n	8001fde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4a78      	ldr	r2, [pc, #480]	; (8001ff4 <HAL_I2C_Init+0x280>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	0c9b      	lsrs	r3, r3, #18
 8001e18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a6a      	ldr	r2, [pc, #424]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d802      	bhi.n	8001e48 <HAL_I2C_Init+0xd4>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3301      	adds	r3, #1
 8001e46:	e009      	b.n	8001e5c <HAL_I2C_Init+0xe8>
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e4e:	fb02 f303 	mul.w	r3, r2, r3
 8001e52:	4a69      	ldr	r2, [pc, #420]	; (8001ff8 <HAL_I2C_Init+0x284>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	495c      	ldr	r1, [pc, #368]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001e78:	428b      	cmp	r3, r1
 8001e7a:	d819      	bhi.n	8001eb0 <HAL_I2C_Init+0x13c>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e59      	subs	r1, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e8a:	1c59      	adds	r1, r3, #1
 8001e8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e90:	400b      	ands	r3, r1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_I2C_Init+0x138>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1e59      	subs	r1, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eaa:	e051      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001eac:	2304      	movs	r3, #4
 8001eae:	e04f      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d111      	bne.n	8001edc <HAL_I2C_Init+0x168>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e58      	subs	r0, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	440b      	add	r3, r1
 8001ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e012      	b.n	8001f02 <HAL_I2C_Init+0x18e>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e58      	subs	r0, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	0099      	lsls	r1, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Init+0x196>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e022      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10e      	bne.n	8001f30 <HAL_I2C_Init+0x1bc>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1e58      	subs	r0, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6859      	ldr	r1, [r3, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	440b      	add	r3, r1
 8001f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f24:	3301      	adds	r3, #1
 8001f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f2e:	e00f      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1e58      	subs	r0, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	0099      	lsls	r1, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	6809      	ldr	r1, [r1, #0]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6911      	ldr	r1, [r2, #16]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68d2      	ldr	r2, [r2, #12]
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	000186a0 	.word	0x000186a0
 8001fec:	001e847f 	.word	0x001e847f
 8001ff0:	003d08ff 	.word	0x003d08ff
 8001ff4:	431bde83 	.word	0x431bde83
 8001ff8:	10624dd3 	.word	0x10624dd3

08001ffc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	461a      	mov	r2, r3
 8002008:	460b      	mov	r3, r1
 800200a:	817b      	strh	r3, [r7, #10]
 800200c:	4613      	mov	r3, r2
 800200e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff fb9e 	bl	8001750 <HAL_GetTick>
 8002014:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b20      	cmp	r3, #32
 8002020:	f040 80e0 	bne.w	80021e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2319      	movs	r3, #25
 800202a:	2201      	movs	r2, #1
 800202c:	4970      	ldr	r1, [pc, #448]	; (80021f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f964 	bl	80022fc <I2C_WaitOnFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
 800203c:	e0d3      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_I2C_Master_Transmit+0x50>
 8002048:	2302      	movs	r3, #2
 800204a:	e0cc      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d007      	beq.n	8002072 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002080:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2221      	movs	r2, #33	; 0x21
 8002086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2210      	movs	r2, #16
 800208e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	893a      	ldrh	r2, [r7, #8]
 80020a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4a50      	ldr	r2, [pc, #320]	; (80021f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020b4:	8979      	ldrh	r1, [r7, #10]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6a3a      	ldr	r2, [r7, #32]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f89c 	bl	80021f8 <I2C_MasterRequestWrite>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e08d      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020e0:	e066      	b.n	80021b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	6a39      	ldr	r1, [r7, #32]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 fa22 	bl	8002530 <I2C_WaitOnTXEFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d107      	bne.n	800210a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002108:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06b      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b04      	cmp	r3, #4
 800214a:	d11b      	bne.n	8002184 <HAL_I2C_Master_Transmit+0x188>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	d017      	beq.n	8002184 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216e:	b29b      	uxth	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	6a39      	ldr	r1, [r7, #32]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 fa19 	bl	80025c0 <I2C_WaitOnBTFFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00d      	beq.n	80021b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	2b04      	cmp	r3, #4
 800219a:	d107      	bne.n	80021ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e01a      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d194      	bne.n	80020e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e000      	b.n	80021e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
  }
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	00100002 	.word	0x00100002
 80021f4:	ffff0000 	.word	0xffff0000

080021f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	460b      	mov	r3, r1
 8002206:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b08      	cmp	r3, #8
 8002212:	d006      	beq.n	8002222 <I2C_MasterRequestWrite+0x2a>
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d003      	beq.n	8002222 <I2C_MasterRequestWrite+0x2a>
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002220:	d108      	bne.n	8002234 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e00b      	b.n	800224c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	2b12      	cmp	r3, #18
 800223a:	d107      	bne.n	800224c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800224a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f84f 	bl	80022fc <I2C_WaitOnFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00d      	beq.n	8002280 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002272:	d103      	bne.n	800227c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e035      	b.n	80022ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002288:	d108      	bne.n	800229c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800228a:	897b      	ldrh	r3, [r7, #10]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	e01b      	b.n	80022d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800229c:	897b      	ldrh	r3, [r7, #10]
 800229e:	11db      	asrs	r3, r3, #7
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f003 0306 	and.w	r3, r3, #6
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f063 030f 	orn	r3, r3, #15
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	490e      	ldr	r1, [pc, #56]	; (80022f4 <I2C_MasterRequestWrite+0xfc>)
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f898 	bl	80023f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e010      	b.n	80022ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022ca:	897b      	ldrh	r3, [r7, #10]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4907      	ldr	r1, [pc, #28]	; (80022f8 <I2C_MasterRequestWrite+0x100>)
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f888 	bl	80023f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	00010008 	.word	0x00010008
 80022f8:	00010002 	.word	0x00010002

080022fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800230c:	e048      	b.n	80023a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002314:	d044      	beq.n	80023a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002316:	f7ff fa1b 	bl	8001750 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d302      	bcc.n	800232c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d139      	bne.n	80023a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	0c1b      	lsrs	r3, r3, #16
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d10d      	bne.n	8002352 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	43da      	mvns	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	4013      	ands	r3, r2
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf0c      	ite	eq
 8002348:	2301      	moveq	r3, #1
 800234a:	2300      	movne	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	461a      	mov	r2, r3
 8002350:	e00c      	b.n	800236c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	43da      	mvns	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4013      	ands	r3, r2
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	429a      	cmp	r2, r3
 8002370:	d116      	bne.n	80023a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f043 0220 	orr.w	r2, r3, #32
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e023      	b.n	80023e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d10d      	bne.n	80023c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	43da      	mvns	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	4013      	ands	r3, r2
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	e00c      	b.n	80023e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	43da      	mvns	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	4013      	ands	r3, r2
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d093      	beq.n	800230e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023fe:	e071      	b.n	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800240e:	d123      	bne.n	8002458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002428:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f043 0204 	orr.w	r2, r3, #4
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e067      	b.n	8002528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245e:	d041      	beq.n	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002460:	f7ff f976 	bl	8001750 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	429a      	cmp	r2, r3
 800246e:	d302      	bcc.n	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d136      	bne.n	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	0c1b      	lsrs	r3, r3, #16
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d10c      	bne.n	800249a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4013      	ands	r3, r2
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf14      	ite	ne
 8002492:	2301      	movne	r3, #1
 8002494:	2300      	moveq	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	e00b      	b.n	80024b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	43da      	mvns	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4013      	ands	r3, r2
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bf14      	ite	ne
 80024ac:	2301      	movne	r3, #1
 80024ae:	2300      	moveq	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d016      	beq.n	80024e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f043 0220 	orr.w	r2, r3, #32
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e021      	b.n	8002528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	0c1b      	lsrs	r3, r3, #16
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d10c      	bne.n	8002508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	43da      	mvns	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	4013      	ands	r3, r2
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf14      	ite	ne
 8002500:	2301      	movne	r3, #1
 8002502:	2300      	moveq	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e00b      	b.n	8002520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4013      	ands	r3, r2
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	bf14      	ite	ne
 800251a:	2301      	movne	r3, #1
 800251c:	2300      	moveq	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	f47f af6d 	bne.w	8002400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800253c:	e034      	b.n	80025a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f886 	bl	8002650 <I2C_IsAcknowledgeFailed>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e034      	b.n	80025b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002554:	d028      	beq.n	80025a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002556:	f7ff f8fb 	bl	8001750 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	429a      	cmp	r2, r3
 8002564:	d302      	bcc.n	800256c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d11d      	bne.n	80025a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002576:	2b80      	cmp	r3, #128	; 0x80
 8002578:	d016      	beq.n	80025a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	f043 0220 	orr.w	r2, r3, #32
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e007      	b.n	80025b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b2:	2b80      	cmp	r3, #128	; 0x80
 80025b4:	d1c3      	bne.n	800253e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025cc:	e034      	b.n	8002638 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f83e 	bl	8002650 <I2C_IsAcknowledgeFailed>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e034      	b.n	8002648 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d028      	beq.n	8002638 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e6:	f7ff f8b3 	bl	8001750 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d302      	bcc.n	80025fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d11d      	bne.n	8002638 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b04      	cmp	r3, #4
 8002608:	d016      	beq.n	8002638 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f043 0220 	orr.w	r2, r3, #32
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e007      	b.n	8002648 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b04      	cmp	r3, #4
 8002644:	d1c3      	bne.n	80025ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002666:	d11b      	bne.n	80026a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002670:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	f043 0204 	orr.w	r2, r3, #4
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e26c      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 8087 	beq.w	80027da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026cc:	4b92      	ldr	r3, [pc, #584]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 030c 	and.w	r3, r3, #12
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d00c      	beq.n	80026f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026d8:	4b8f      	ldr	r3, [pc, #572]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 030c 	and.w	r3, r3, #12
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d112      	bne.n	800270a <HAL_RCC_OscConfig+0x5e>
 80026e4:	4b8c      	ldr	r3, [pc, #560]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f0:	d10b      	bne.n	800270a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f2:	4b89      	ldr	r3, [pc, #548]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d06c      	beq.n	80027d8 <HAL_RCC_OscConfig+0x12c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d168      	bne.n	80027d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e246      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002712:	d106      	bne.n	8002722 <HAL_RCC_OscConfig+0x76>
 8002714:	4b80      	ldr	r3, [pc, #512]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a7f      	ldr	r2, [pc, #508]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 800271a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	e02e      	b.n	8002780 <HAL_RCC_OscConfig+0xd4>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x98>
 800272a:	4b7b      	ldr	r3, [pc, #492]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a7a      	ldr	r2, [pc, #488]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 8002730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4b78      	ldr	r3, [pc, #480]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a77      	ldr	r2, [pc, #476]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 800273c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e01d      	b.n	8002780 <HAL_RCC_OscConfig+0xd4>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800274c:	d10c      	bne.n	8002768 <HAL_RCC_OscConfig+0xbc>
 800274e:	4b72      	ldr	r3, [pc, #456]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a71      	ldr	r2, [pc, #452]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 8002754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	4b6f      	ldr	r3, [pc, #444]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a6e      	ldr	r2, [pc, #440]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	e00b      	b.n	8002780 <HAL_RCC_OscConfig+0xd4>
 8002768:	4b6b      	ldr	r3, [pc, #428]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a6a      	ldr	r2, [pc, #424]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 800276e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	4b68      	ldr	r3, [pc, #416]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a67      	ldr	r2, [pc, #412]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 800277a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d013      	beq.n	80027b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7fe ffe2 	bl	8001750 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002790:	f7fe ffde 	bl	8001750 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e1fa      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	4b5d      	ldr	r3, [pc, #372]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0xe4>
 80027ae:	e014      	b.n	80027da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7fe ffce 	bl	8001750 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b8:	f7fe ffca 	bl	8001750 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	; 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e1e6      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ca:	4b53      	ldr	r3, [pc, #332]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x10c>
 80027d6:	e000      	b.n	80027da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d063      	beq.n	80028ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027e6:	4b4c      	ldr	r3, [pc, #304]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027f2:	4b49      	ldr	r3, [pc, #292]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d11c      	bne.n	8002838 <HAL_RCC_OscConfig+0x18c>
 80027fe:	4b46      	ldr	r3, [pc, #280]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d116      	bne.n	8002838 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280a:	4b43      	ldr	r3, [pc, #268]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d005      	beq.n	8002822 <HAL_RCC_OscConfig+0x176>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d001      	beq.n	8002822 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e1ba      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002822:	4b3d      	ldr	r3, [pc, #244]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4939      	ldr	r1, [pc, #228]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002836:	e03a      	b.n	80028ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d020      	beq.n	8002882 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002840:	4b36      	ldr	r3, [pc, #216]	; (800291c <HAL_RCC_OscConfig+0x270>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002846:	f7fe ff83 	bl	8001750 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284e:	f7fe ff7f 	bl	8001750 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e19b      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002860:	4b2d      	ldr	r3, [pc, #180]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286c:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4927      	ldr	r1, [pc, #156]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 800287c:	4313      	orrs	r3, r2
 800287e:	600b      	str	r3, [r1, #0]
 8002880:	e015      	b.n	80028ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002882:	4b26      	ldr	r3, [pc, #152]	; (800291c <HAL_RCC_OscConfig+0x270>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe ff62 	bl	8001750 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002890:	f7fe ff5e 	bl	8001750 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e17a      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a2:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d03a      	beq.n	8002930 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d019      	beq.n	80028f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c2:	4b17      	ldr	r3, [pc, #92]	; (8002920 <HAL_RCC_OscConfig+0x274>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c8:	f7fe ff42 	bl	8001750 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d0:	f7fe ff3e 	bl	8001750 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e15a      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e2:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028ee:	2001      	movs	r0, #1
 80028f0:	f000 facc 	bl	8002e8c <RCC_Delay>
 80028f4:	e01c      	b.n	8002930 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_RCC_OscConfig+0x274>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7fe ff28 	bl	8001750 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002902:	e00f      	b.n	8002924 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002904:	f7fe ff24 	bl	8001750 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d908      	bls.n	8002924 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e140      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	42420000 	.word	0x42420000
 8002920:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002924:	4b9e      	ldr	r3, [pc, #632]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1e9      	bne.n	8002904 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80a6 	beq.w	8002a8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293e:	2300      	movs	r3, #0
 8002940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002942:	4b97      	ldr	r3, [pc, #604]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10d      	bne.n	800296a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294e:	4b94      	ldr	r3, [pc, #592]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	4a93      	ldr	r2, [pc, #588]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002958:	61d3      	str	r3, [r2, #28]
 800295a:	4b91      	ldr	r3, [pc, #580]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002966:	2301      	movs	r3, #1
 8002968:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296a:	4b8e      	ldr	r3, [pc, #568]	; (8002ba4 <HAL_RCC_OscConfig+0x4f8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d118      	bne.n	80029a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002976:	4b8b      	ldr	r3, [pc, #556]	; (8002ba4 <HAL_RCC_OscConfig+0x4f8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a8a      	ldr	r2, [pc, #552]	; (8002ba4 <HAL_RCC_OscConfig+0x4f8>)
 800297c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002982:	f7fe fee5 	bl	8001750 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298a:	f7fe fee1 	bl	8001750 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b64      	cmp	r3, #100	; 0x64
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e0fd      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299c:	4b81      	ldr	r3, [pc, #516]	; (8002ba4 <HAL_RCC_OscConfig+0x4f8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d106      	bne.n	80029be <HAL_RCC_OscConfig+0x312>
 80029b0:	4b7b      	ldr	r3, [pc, #492]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	4a7a      	ldr	r2, [pc, #488]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6213      	str	r3, [r2, #32]
 80029bc:	e02d      	b.n	8002a1a <HAL_RCC_OscConfig+0x36e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x334>
 80029c6:	4b76      	ldr	r3, [pc, #472]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	4a75      	ldr	r2, [pc, #468]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6213      	str	r3, [r2, #32]
 80029d2:	4b73      	ldr	r3, [pc, #460]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4a72      	ldr	r2, [pc, #456]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	6213      	str	r3, [r2, #32]
 80029de:	e01c      	b.n	8002a1a <HAL_RCC_OscConfig+0x36e>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d10c      	bne.n	8002a02 <HAL_RCC_OscConfig+0x356>
 80029e8:	4b6d      	ldr	r3, [pc, #436]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	4a6c      	ldr	r2, [pc, #432]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	6213      	str	r3, [r2, #32]
 80029f4:	4b6a      	ldr	r3, [pc, #424]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4a69      	ldr	r2, [pc, #420]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6213      	str	r3, [r2, #32]
 8002a00:	e00b      	b.n	8002a1a <HAL_RCC_OscConfig+0x36e>
 8002a02:	4b67      	ldr	r3, [pc, #412]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	4a66      	ldr	r2, [pc, #408]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6213      	str	r3, [r2, #32]
 8002a0e:	4b64      	ldr	r3, [pc, #400]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4a63      	ldr	r2, [pc, #396]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002a14:	f023 0304 	bic.w	r3, r3, #4
 8002a18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d015      	beq.n	8002a4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a22:	f7fe fe95 	bl	8001750 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a28:	e00a      	b.n	8002a40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2a:	f7fe fe91 	bl	8001750 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e0ab      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a40:	4b57      	ldr	r3, [pc, #348]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0ee      	beq.n	8002a2a <HAL_RCC_OscConfig+0x37e>
 8002a4c:	e014      	b.n	8002a78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fe7f 	bl	8001750 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a56:	f7fe fe7b 	bl	8001750 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e095      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1ee      	bne.n	8002a56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d105      	bne.n	8002a8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7e:	4b48      	ldr	r3, [pc, #288]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	4a47      	ldr	r2, [pc, #284]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8081 	beq.w	8002b96 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a94:	4b42      	ldr	r3, [pc, #264]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d061      	beq.n	8002b64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d146      	bne.n	8002b36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa8:	4b3f      	ldr	r3, [pc, #252]	; (8002ba8 <HAL_RCC_OscConfig+0x4fc>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aae:	f7fe fe4f 	bl	8001750 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7fe fe4b 	bl	8001750 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e067      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac8:	4b35      	ldr	r3, [pc, #212]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f0      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002adc:	d108      	bne.n	8002af0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ade:	4b30      	ldr	r3, [pc, #192]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	492d      	ldr	r1, [pc, #180]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af0:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a19      	ldr	r1, [r3, #32]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	430b      	orrs	r3, r1
 8002b02:	4927      	ldr	r1, [pc, #156]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <HAL_RCC_OscConfig+0x4fc>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fe1f 	bl	8001750 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b16:	f7fe fe1b 	bl	8001750 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e037      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b28:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x46a>
 8002b34:	e02f      	b.n	8002b96 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b36:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <HAL_RCC_OscConfig+0x4fc>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fe08 	bl	8001750 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe fe04 	bl	8001750 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e020      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x498>
 8002b62:	e018      	b.n	8002b96 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e013      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_OscConfig+0x4f4>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40007000 	.word	0x40007000
 8002ba8:	42420060 	.word	0x42420060

08002bac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0d0      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b6a      	ldr	r3, [pc, #424]	; (8002d6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d910      	bls.n	8002bf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b67      	ldr	r3, [pc, #412]	; (8002d6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 0207 	bic.w	r2, r3, #7
 8002bd6:	4965      	ldr	r1, [pc, #404]	; (8002d6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b63      	ldr	r3, [pc, #396]	; (8002d6c <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0b8      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d020      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c08:	4b59      	ldr	r3, [pc, #356]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4a58      	ldr	r2, [pc, #352]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c20:	4b53      	ldr	r3, [pc, #332]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4a52      	ldr	r2, [pc, #328]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c2c:	4b50      	ldr	r3, [pc, #320]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	494d      	ldr	r1, [pc, #308]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d040      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d107      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d115      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e07f      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6a:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e073      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7a:	4b3d      	ldr	r3, [pc, #244]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e06b      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c8a:	4b39      	ldr	r3, [pc, #228]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f023 0203 	bic.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4936      	ldr	r1, [pc, #216]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c9c:	f7fe fd58 	bl	8001750 <HAL_GetTick>
 8002ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca4:	f7fe fd54 	bl	8001750 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e053      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 020c 	and.w	r2, r3, #12
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d1eb      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <HAL_RCC_ClockConfig+0x1c0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d210      	bcs.n	8002cfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <HAL_RCC_ClockConfig+0x1c0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 0207 	bic.w	r2, r3, #7
 8002ce2:	4922      	ldr	r1, [pc, #136]	; (8002d6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <HAL_RCC_ClockConfig+0x1c0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e032      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4916      	ldr	r1, [pc, #88]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d009      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d26:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	490e      	ldr	r1, [pc, #56]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d3a:	f000 f821 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	490a      	ldr	r1, [pc, #40]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4c:	5ccb      	ldrb	r3, [r1, r3]
 8002d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d52:	4a09      	ldr	r2, [pc, #36]	; (8002d78 <HAL_RCC_ClockConfig+0x1cc>)
 8002d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d56:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_RCC_ClockConfig+0x1d0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fcb6 	bl	80016cc <HAL_InitTick>

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40022000 	.word	0x40022000
 8002d70:	40021000 	.word	0x40021000
 8002d74:	0800418c 	.word	0x0800418c
 8002d78:	2000002c 	.word	0x2000002c
 8002d7c:	20000030 	.word	0x20000030

08002d80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	2300      	movs	r3, #0
 8002d94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d9a:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d002      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x30>
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d003      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq+0x36>
 8002dae:	e027      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002db2:	613b      	str	r3, [r7, #16]
      break;
 8002db4:	e027      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	0c9b      	lsrs	r3, r3, #18
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	4a17      	ldr	r2, [pc, #92]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002dc0:	5cd3      	ldrb	r3, [r2, r3]
 8002dc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d010      	beq.n	8002df0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x94>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	0c5b      	lsrs	r3, r3, #17
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	4a11      	ldr	r2, [pc, #68]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002dda:	5cd3      	ldrb	r3, [r2, r3]
 8002ddc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a0d      	ldr	r2, [pc, #52]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002de2:	fb02 f203 	mul.w	r2, r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	e004      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002df4:	fb02 f303 	mul.w	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	613b      	str	r3, [r7, #16]
      break;
 8002dfe:	e002      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e02:	613b      	str	r3, [r7, #16]
      break;
 8002e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e06:	693b      	ldr	r3, [r7, #16]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000
 8002e18:	007a1200 	.word	0x007a1200
 8002e1c:	080041a4 	.word	0x080041a4
 8002e20:	080041b4 	.word	0x080041b4
 8002e24:	003d0900 	.word	0x003d0900

08002e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e2c:	4b02      	ldr	r3, [pc, #8]	; (8002e38 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	2000002c 	.word	0x2000002c

08002e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e40:	f7ff fff2 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	4903      	ldr	r1, [pc, #12]	; (8002e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e52:	5ccb      	ldrb	r3, [r1, r3]
 8002e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	0800419c 	.word	0x0800419c

08002e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e68:	f7ff ffde 	bl	8002e28 <HAL_RCC_GetHCLKFreq>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	0adb      	lsrs	r3, r3, #11
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	4903      	ldr	r1, [pc, #12]	; (8002e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e7a:	5ccb      	ldrb	r3, [r1, r3]
 8002e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021000 	.word	0x40021000
 8002e88:	0800419c 	.word	0x0800419c

08002e8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e94:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <RCC_Delay+0x34>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <RCC_Delay+0x38>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	0a5b      	lsrs	r3, r3, #9
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	fb02 f303 	mul.w	r3, r2, r3
 8002ea6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ea8:	bf00      	nop
  }
  while (Delay --);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1e5a      	subs	r2, r3, #1
 8002eae:	60fa      	str	r2, [r7, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f9      	bne.n	8002ea8 <RCC_Delay+0x1c>
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	2000002c 	.word	0x2000002c
 8002ec4:	10624dd3 	.word	0x10624dd3

08002ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e041      	b.n	8002f5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe f95c 	bl	80011ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3304      	adds	r3, #4
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f000 fa5c 	bl	80033c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d001      	beq.n	8002f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e03a      	b.n	8002ff6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a18      	ldr	r2, [pc, #96]	; (8003000 <HAL_TIM_Base_Start_IT+0x98>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00e      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x58>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002faa:	d009      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x58>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a14      	ldr	r2, [pc, #80]	; (8003004 <HAL_TIM_Base_Start_IT+0x9c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d004      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x58>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a13      	ldr	r2, [pc, #76]	; (8003008 <HAL_TIM_Base_Start_IT+0xa0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d111      	bne.n	8002fe4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d010      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0201 	orr.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe2:	e007      	b.n	8002ff4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr
 8003000:	40012c00 	.word	0x40012c00
 8003004:	40000400 	.word	0x40000400
 8003008:	40000800 	.word	0x40000800

0800300c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d020      	beq.n	8003070 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01b      	beq.n	8003070 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0202 	mvn.w	r2, #2
 8003040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f998 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f98b 	bl	800337a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f99a 	bl	800339e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d020      	beq.n	80030bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01b      	beq.n	80030bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0204 	mvn.w	r2, #4
 800308c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2202      	movs	r2, #2
 8003092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f972 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f965 	bl	800337a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f974 	bl	800339e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d020      	beq.n	8003108 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01b      	beq.n	8003108 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0208 	mvn.w	r2, #8
 80030d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2204      	movs	r2, #4
 80030de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f94c 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 80030f4:	e005      	b.n	8003102 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f93f 	bl	800337a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f94e 	bl	800339e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2b00      	cmp	r3, #0
 8003110:	d020      	beq.n	8003154 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01b      	beq.n	8003154 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0210 	mvn.w	r2, #16
 8003124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2208      	movs	r2, #8
 800312a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f926 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 8003140:	e005      	b.n	800314e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f919 	bl	800337a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f928 	bl	800339e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00c      	beq.n	8003178 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0201 	mvn.w	r2, #1
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fd ff8c 	bl	8001090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00c      	beq.n	800319c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fa7f 	bl	800369a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00c      	beq.n	80031c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f8f8 	bl	80033b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00c      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0220 	mvn.w	r2, #32
 80031dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fa52 	bl	8003688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_TIM_ConfigClockSource+0x1c>
 8003204:	2302      	movs	r3, #2
 8003206:	e0b4      	b.n	8003372 <HAL_TIM_ConfigClockSource+0x186>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800322e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003240:	d03e      	beq.n	80032c0 <HAL_TIM_ConfigClockSource+0xd4>
 8003242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003246:	f200 8087 	bhi.w	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 800324a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324e:	f000 8086 	beq.w	800335e <HAL_TIM_ConfigClockSource+0x172>
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003256:	d87f      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003258:	2b70      	cmp	r3, #112	; 0x70
 800325a:	d01a      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0xa6>
 800325c:	2b70      	cmp	r3, #112	; 0x70
 800325e:	d87b      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003260:	2b60      	cmp	r3, #96	; 0x60
 8003262:	d050      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x11a>
 8003264:	2b60      	cmp	r3, #96	; 0x60
 8003266:	d877      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003268:	2b50      	cmp	r3, #80	; 0x50
 800326a:	d03c      	beq.n	80032e6 <HAL_TIM_ConfigClockSource+0xfa>
 800326c:	2b50      	cmp	r3, #80	; 0x50
 800326e:	d873      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d058      	beq.n	8003326 <HAL_TIM_ConfigClockSource+0x13a>
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d86f      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003278:	2b30      	cmp	r3, #48	; 0x30
 800327a:	d064      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15a>
 800327c:	2b30      	cmp	r3, #48	; 0x30
 800327e:	d86b      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b20      	cmp	r3, #32
 8003282:	d060      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15a>
 8003284:	2b20      	cmp	r3, #32
 8003286:	d867      	bhi.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d05c      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15a>
 800328c:	2b10      	cmp	r3, #16
 800328e:	d05a      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x15a>
 8003290:	e062      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6899      	ldr	r1, [r3, #8]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f000 f974 	bl	800358e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	609a      	str	r2, [r3, #8]
      break;
 80032be:	e04f      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	6899      	ldr	r1, [r3, #8]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f000 f95d 	bl	800358e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032e2:	609a      	str	r2, [r3, #8]
      break;
 80032e4:	e03c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	461a      	mov	r2, r3
 80032f4:	f000 f8d4 	bl	80034a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2150      	movs	r1, #80	; 0x50
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f92b 	bl	800355a <TIM_ITRx_SetConfig>
      break;
 8003304:	e02c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6859      	ldr	r1, [r3, #4]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	461a      	mov	r2, r3
 8003314:	f000 f8f2 	bl	80034fc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2160      	movs	r1, #96	; 0x60
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f91b 	bl	800355a <TIM_ITRx_SetConfig>
      break;
 8003324:	e01c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6859      	ldr	r1, [r3, #4]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	461a      	mov	r2, r3
 8003334:	f000 f8b4 	bl	80034a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2140      	movs	r1, #64	; 0x40
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f90b 	bl	800355a <TIM_ITRx_SetConfig>
      break;
 8003344:	e00c      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f000 f902 	bl	800355a <TIM_ITRx_SetConfig>
      break;
 8003356:	e003      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
      break;
 800335c:	e000      	b.n	8003360 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800335e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr
	...

080033c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a2f      	ldr	r2, [pc, #188]	; (8003494 <TIM_Base_SetConfig+0xd0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00b      	beq.n	80033f4 <TIM_Base_SetConfig+0x30>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e2:	d007      	beq.n	80033f4 <TIM_Base_SetConfig+0x30>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a2c      	ldr	r2, [pc, #176]	; (8003498 <TIM_Base_SetConfig+0xd4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <TIM_Base_SetConfig+0x30>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a2b      	ldr	r2, [pc, #172]	; (800349c <TIM_Base_SetConfig+0xd8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d108      	bne.n	8003406 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a22      	ldr	r2, [pc, #136]	; (8003494 <TIM_Base_SetConfig+0xd0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00b      	beq.n	8003426 <TIM_Base_SetConfig+0x62>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003414:	d007      	beq.n	8003426 <TIM_Base_SetConfig+0x62>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1f      	ldr	r2, [pc, #124]	; (8003498 <TIM_Base_SetConfig+0xd4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d003      	beq.n	8003426 <TIM_Base_SetConfig+0x62>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1e      	ldr	r2, [pc, #120]	; (800349c <TIM_Base_SetConfig+0xd8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d108      	bne.n	8003438 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a0d      	ldr	r2, [pc, #52]	; (8003494 <TIM_Base_SetConfig+0xd0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d103      	bne.n	800346c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f023 0201 	bic.w	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	611a      	str	r2, [r3, #16]
  }
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40000400 	.word	0x40000400
 800349c:	40000800 	.word	0x40000800

080034a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f023 0201 	bic.w	r2, r3, #1
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f023 030a 	bic.w	r3, r3, #10
 80034dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	621a      	str	r2, [r3, #32]
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr

080034fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f023 0210 	bic.w	r2, r3, #16
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	031b      	lsls	r3, r3, #12
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003538:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4313      	orrs	r3, r2
 8003542:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	621a      	str	r2, [r3, #32]
}
 8003550:	bf00      	nop
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr

0800355a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800355a:	b480      	push	{r7}
 800355c:	b085      	sub	sp, #20
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	f043 0307 	orr.w	r3, r3, #7
 800357c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	609a      	str	r2, [r3, #8]
}
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr

0800358e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800358e:	b480      	push	{r7}
 8003590:	b087      	sub	sp, #28
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	021a      	lsls	r2, r3, #8
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	609a      	str	r2, [r3, #8]
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e046      	b.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a16      	ldr	r2, [pc, #88]	; (800367c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d00e      	beq.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003630:	d009      	beq.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a12      	ldr	r2, [pc, #72]	; (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d004      	beq.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a10      	ldr	r2, [pc, #64]	; (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d10c      	bne.n	8003660 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800364c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	4313      	orrs	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr
 800367c:	40012c00 	.word	0x40012c00
 8003680:	40000400 	.word	0x40000400
 8003684:	40000800 	.word	0x40000800

08003688 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr

0800369a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e042      	b.n	8003744 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d106      	bne.n	80036d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fd fd8e 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2224      	movs	r2, #36	; 0x24
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f82b 	bl	800374c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695a      	ldr	r2, [r3, #20]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003786:	f023 030c 	bic.w	r3, r3, #12
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	430b      	orrs	r3, r1
 8003792:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a2c      	ldr	r2, [pc, #176]	; (8003860 <UART_SetConfig+0x114>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d103      	bne.n	80037bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037b4:	f7ff fb56 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	e002      	b.n	80037c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037bc:	f7ff fb3e 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 80037c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	009a      	lsls	r2, r3, #2
 80037cc:	441a      	add	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	4a22      	ldr	r2, [pc, #136]	; (8003864 <UART_SetConfig+0x118>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	0119      	lsls	r1, r3, #4
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	009a      	lsls	r2, r3, #2
 80037ec:	441a      	add	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f8:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <UART_SetConfig+0x118>)
 80037fa:	fba3 0302 	umull	r0, r3, r3, r2
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	2064      	movs	r0, #100	; 0x64
 8003802:	fb00 f303 	mul.w	r3, r0, r3
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	3332      	adds	r3, #50	; 0x32
 800380c:	4a15      	ldr	r2, [pc, #84]	; (8003864 <UART_SetConfig+0x118>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003818:	4419      	add	r1, r3
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009a      	lsls	r2, r3, #2
 8003824:	441a      	add	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <UART_SetConfig+0x118>)
 8003832:	fba3 0302 	umull	r0, r3, r3, r2
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	2064      	movs	r0, #100	; 0x64
 800383a:	fb00 f303 	mul.w	r3, r0, r3
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	3332      	adds	r3, #50	; 0x32
 8003844:	4a07      	ldr	r2, [pc, #28]	; (8003864 <UART_SetConfig+0x118>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	f003 020f 	and.w	r2, r3, #15
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	440a      	add	r2, r1
 8003856:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40013800 	.word	0x40013800
 8003864:	51eb851f 	.word	0x51eb851f

08003868 <__errno>:
 8003868:	4b01      	ldr	r3, [pc, #4]	; (8003870 <__errno+0x8>)
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000038 	.word	0x20000038

08003874 <__libc_init_array>:
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	2600      	movs	r6, #0
 8003878:	4d0c      	ldr	r5, [pc, #48]	; (80038ac <__libc_init_array+0x38>)
 800387a:	4c0d      	ldr	r4, [pc, #52]	; (80038b0 <__libc_init_array+0x3c>)
 800387c:	1b64      	subs	r4, r4, r5
 800387e:	10a4      	asrs	r4, r4, #2
 8003880:	42a6      	cmp	r6, r4
 8003882:	d109      	bne.n	8003898 <__libc_init_array+0x24>
 8003884:	f000 fc5c 	bl	8004140 <_init>
 8003888:	2600      	movs	r6, #0
 800388a:	4d0a      	ldr	r5, [pc, #40]	; (80038b4 <__libc_init_array+0x40>)
 800388c:	4c0a      	ldr	r4, [pc, #40]	; (80038b8 <__libc_init_array+0x44>)
 800388e:	1b64      	subs	r4, r4, r5
 8003890:	10a4      	asrs	r4, r4, #2
 8003892:	42a6      	cmp	r6, r4
 8003894:	d105      	bne.n	80038a2 <__libc_init_array+0x2e>
 8003896:	bd70      	pop	{r4, r5, r6, pc}
 8003898:	f855 3b04 	ldr.w	r3, [r5], #4
 800389c:	4798      	blx	r3
 800389e:	3601      	adds	r6, #1
 80038a0:	e7ee      	b.n	8003880 <__libc_init_array+0xc>
 80038a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a6:	4798      	blx	r3
 80038a8:	3601      	adds	r6, #1
 80038aa:	e7f2      	b.n	8003892 <__libc_init_array+0x1e>
 80038ac:	080041ec 	.word	0x080041ec
 80038b0:	080041ec 	.word	0x080041ec
 80038b4:	080041ec 	.word	0x080041ec
 80038b8:	080041f0 	.word	0x080041f0

080038bc <memset>:
 80038bc:	4603      	mov	r3, r0
 80038be:	4402      	add	r2, r0
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d100      	bne.n	80038c6 <memset+0xa>
 80038c4:	4770      	bx	lr
 80038c6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ca:	e7f9      	b.n	80038c0 <memset+0x4>

080038cc <siprintf>:
 80038cc:	b40e      	push	{r1, r2, r3}
 80038ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038d2:	b500      	push	{lr}
 80038d4:	b09c      	sub	sp, #112	; 0x70
 80038d6:	ab1d      	add	r3, sp, #116	; 0x74
 80038d8:	9002      	str	r0, [sp, #8]
 80038da:	9006      	str	r0, [sp, #24]
 80038dc:	9107      	str	r1, [sp, #28]
 80038de:	9104      	str	r1, [sp, #16]
 80038e0:	4808      	ldr	r0, [pc, #32]	; (8003904 <siprintf+0x38>)
 80038e2:	4909      	ldr	r1, [pc, #36]	; (8003908 <siprintf+0x3c>)
 80038e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80038e8:	9105      	str	r1, [sp, #20]
 80038ea:	6800      	ldr	r0, [r0, #0]
 80038ec:	a902      	add	r1, sp, #8
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	f000 f868 	bl	80039c4 <_svfiprintf_r>
 80038f4:	2200      	movs	r2, #0
 80038f6:	9b02      	ldr	r3, [sp, #8]
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	b01c      	add	sp, #112	; 0x70
 80038fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003900:	b003      	add	sp, #12
 8003902:	4770      	bx	lr
 8003904:	20000038 	.word	0x20000038
 8003908:	ffff0208 	.word	0xffff0208

0800390c <__ssputs_r>:
 800390c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003910:	688e      	ldr	r6, [r1, #8]
 8003912:	4682      	mov	sl, r0
 8003914:	429e      	cmp	r6, r3
 8003916:	460c      	mov	r4, r1
 8003918:	4690      	mov	r8, r2
 800391a:	461f      	mov	r7, r3
 800391c:	d838      	bhi.n	8003990 <__ssputs_r+0x84>
 800391e:	898a      	ldrh	r2, [r1, #12]
 8003920:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003924:	d032      	beq.n	800398c <__ssputs_r+0x80>
 8003926:	6825      	ldr	r5, [r4, #0]
 8003928:	6909      	ldr	r1, [r1, #16]
 800392a:	3301      	adds	r3, #1
 800392c:	eba5 0901 	sub.w	r9, r5, r1
 8003930:	6965      	ldr	r5, [r4, #20]
 8003932:	444b      	add	r3, r9
 8003934:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003938:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800393c:	106d      	asrs	r5, r5, #1
 800393e:	429d      	cmp	r5, r3
 8003940:	bf38      	it	cc
 8003942:	461d      	movcc	r5, r3
 8003944:	0553      	lsls	r3, r2, #21
 8003946:	d531      	bpl.n	80039ac <__ssputs_r+0xa0>
 8003948:	4629      	mov	r1, r5
 800394a:	f000 fb53 	bl	8003ff4 <_malloc_r>
 800394e:	4606      	mov	r6, r0
 8003950:	b950      	cbnz	r0, 8003968 <__ssputs_r+0x5c>
 8003952:	230c      	movs	r3, #12
 8003954:	f04f 30ff 	mov.w	r0, #4294967295
 8003958:	f8ca 3000 	str.w	r3, [sl]
 800395c:	89a3      	ldrh	r3, [r4, #12]
 800395e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003962:	81a3      	strh	r3, [r4, #12]
 8003964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003968:	464a      	mov	r2, r9
 800396a:	6921      	ldr	r1, [r4, #16]
 800396c:	f000 face 	bl	8003f0c <memcpy>
 8003970:	89a3      	ldrh	r3, [r4, #12]
 8003972:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397a:	81a3      	strh	r3, [r4, #12]
 800397c:	6126      	str	r6, [r4, #16]
 800397e:	444e      	add	r6, r9
 8003980:	6026      	str	r6, [r4, #0]
 8003982:	463e      	mov	r6, r7
 8003984:	6165      	str	r5, [r4, #20]
 8003986:	eba5 0509 	sub.w	r5, r5, r9
 800398a:	60a5      	str	r5, [r4, #8]
 800398c:	42be      	cmp	r6, r7
 800398e:	d900      	bls.n	8003992 <__ssputs_r+0x86>
 8003990:	463e      	mov	r6, r7
 8003992:	4632      	mov	r2, r6
 8003994:	4641      	mov	r1, r8
 8003996:	6820      	ldr	r0, [r4, #0]
 8003998:	f000 fac6 	bl	8003f28 <memmove>
 800399c:	68a3      	ldr	r3, [r4, #8]
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	1b9b      	subs	r3, r3, r6
 80039a2:	4432      	add	r2, r6
 80039a4:	2000      	movs	r0, #0
 80039a6:	60a3      	str	r3, [r4, #8]
 80039a8:	6022      	str	r2, [r4, #0]
 80039aa:	e7db      	b.n	8003964 <__ssputs_r+0x58>
 80039ac:	462a      	mov	r2, r5
 80039ae:	f000 fb7b 	bl	80040a8 <_realloc_r>
 80039b2:	4606      	mov	r6, r0
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d1e1      	bne.n	800397c <__ssputs_r+0x70>
 80039b8:	4650      	mov	r0, sl
 80039ba:	6921      	ldr	r1, [r4, #16]
 80039bc:	f000 face 	bl	8003f5c <_free_r>
 80039c0:	e7c7      	b.n	8003952 <__ssputs_r+0x46>
	...

080039c4 <_svfiprintf_r>:
 80039c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c8:	4698      	mov	r8, r3
 80039ca:	898b      	ldrh	r3, [r1, #12]
 80039cc:	4607      	mov	r7, r0
 80039ce:	061b      	lsls	r3, r3, #24
 80039d0:	460d      	mov	r5, r1
 80039d2:	4614      	mov	r4, r2
 80039d4:	b09d      	sub	sp, #116	; 0x74
 80039d6:	d50e      	bpl.n	80039f6 <_svfiprintf_r+0x32>
 80039d8:	690b      	ldr	r3, [r1, #16]
 80039da:	b963      	cbnz	r3, 80039f6 <_svfiprintf_r+0x32>
 80039dc:	2140      	movs	r1, #64	; 0x40
 80039de:	f000 fb09 	bl	8003ff4 <_malloc_r>
 80039e2:	6028      	str	r0, [r5, #0]
 80039e4:	6128      	str	r0, [r5, #16]
 80039e6:	b920      	cbnz	r0, 80039f2 <_svfiprintf_r+0x2e>
 80039e8:	230c      	movs	r3, #12
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	f04f 30ff 	mov.w	r0, #4294967295
 80039f0:	e0d1      	b.n	8003b96 <_svfiprintf_r+0x1d2>
 80039f2:	2340      	movs	r3, #64	; 0x40
 80039f4:	616b      	str	r3, [r5, #20]
 80039f6:	2300      	movs	r3, #0
 80039f8:	9309      	str	r3, [sp, #36]	; 0x24
 80039fa:	2320      	movs	r3, #32
 80039fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a00:	2330      	movs	r3, #48	; 0x30
 8003a02:	f04f 0901 	mov.w	r9, #1
 8003a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003bb0 <_svfiprintf_r+0x1ec>
 8003a0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a12:	4623      	mov	r3, r4
 8003a14:	469a      	mov	sl, r3
 8003a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a1a:	b10a      	cbz	r2, 8003a20 <_svfiprintf_r+0x5c>
 8003a1c:	2a25      	cmp	r2, #37	; 0x25
 8003a1e:	d1f9      	bne.n	8003a14 <_svfiprintf_r+0x50>
 8003a20:	ebba 0b04 	subs.w	fp, sl, r4
 8003a24:	d00b      	beq.n	8003a3e <_svfiprintf_r+0x7a>
 8003a26:	465b      	mov	r3, fp
 8003a28:	4622      	mov	r2, r4
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	4638      	mov	r0, r7
 8003a2e:	f7ff ff6d 	bl	800390c <__ssputs_r>
 8003a32:	3001      	adds	r0, #1
 8003a34:	f000 80aa 	beq.w	8003b8c <_svfiprintf_r+0x1c8>
 8003a38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a3a:	445a      	add	r2, fp
 8003a3c:	9209      	str	r2, [sp, #36]	; 0x24
 8003a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80a2 	beq.w	8003b8c <_svfiprintf_r+0x1c8>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a52:	f10a 0a01 	add.w	sl, sl, #1
 8003a56:	9304      	str	r3, [sp, #16]
 8003a58:	9307      	str	r3, [sp, #28]
 8003a5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a5e:	931a      	str	r3, [sp, #104]	; 0x68
 8003a60:	4654      	mov	r4, sl
 8003a62:	2205      	movs	r2, #5
 8003a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a68:	4851      	ldr	r0, [pc, #324]	; (8003bb0 <_svfiprintf_r+0x1ec>)
 8003a6a:	f000 fa41 	bl	8003ef0 <memchr>
 8003a6e:	9a04      	ldr	r2, [sp, #16]
 8003a70:	b9d8      	cbnz	r0, 8003aaa <_svfiprintf_r+0xe6>
 8003a72:	06d0      	lsls	r0, r2, #27
 8003a74:	bf44      	itt	mi
 8003a76:	2320      	movmi	r3, #32
 8003a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a7c:	0711      	lsls	r1, r2, #28
 8003a7e:	bf44      	itt	mi
 8003a80:	232b      	movmi	r3, #43	; 0x2b
 8003a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a86:	f89a 3000 	ldrb.w	r3, [sl]
 8003a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a8c:	d015      	beq.n	8003aba <_svfiprintf_r+0xf6>
 8003a8e:	4654      	mov	r4, sl
 8003a90:	2000      	movs	r0, #0
 8003a92:	f04f 0c0a 	mov.w	ip, #10
 8003a96:	9a07      	ldr	r2, [sp, #28]
 8003a98:	4621      	mov	r1, r4
 8003a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a9e:	3b30      	subs	r3, #48	; 0x30
 8003aa0:	2b09      	cmp	r3, #9
 8003aa2:	d94e      	bls.n	8003b42 <_svfiprintf_r+0x17e>
 8003aa4:	b1b0      	cbz	r0, 8003ad4 <_svfiprintf_r+0x110>
 8003aa6:	9207      	str	r2, [sp, #28]
 8003aa8:	e014      	b.n	8003ad4 <_svfiprintf_r+0x110>
 8003aaa:	eba0 0308 	sub.w	r3, r0, r8
 8003aae:	fa09 f303 	lsl.w	r3, r9, r3
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	46a2      	mov	sl, r4
 8003ab6:	9304      	str	r3, [sp, #16]
 8003ab8:	e7d2      	b.n	8003a60 <_svfiprintf_r+0x9c>
 8003aba:	9b03      	ldr	r3, [sp, #12]
 8003abc:	1d19      	adds	r1, r3, #4
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	9103      	str	r1, [sp, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	bfbb      	ittet	lt
 8003ac6:	425b      	neglt	r3, r3
 8003ac8:	f042 0202 	orrlt.w	r2, r2, #2
 8003acc:	9307      	strge	r3, [sp, #28]
 8003ace:	9307      	strlt	r3, [sp, #28]
 8003ad0:	bfb8      	it	lt
 8003ad2:	9204      	strlt	r2, [sp, #16]
 8003ad4:	7823      	ldrb	r3, [r4, #0]
 8003ad6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ad8:	d10c      	bne.n	8003af4 <_svfiprintf_r+0x130>
 8003ada:	7863      	ldrb	r3, [r4, #1]
 8003adc:	2b2a      	cmp	r3, #42	; 0x2a
 8003ade:	d135      	bne.n	8003b4c <_svfiprintf_r+0x188>
 8003ae0:	9b03      	ldr	r3, [sp, #12]
 8003ae2:	3402      	adds	r4, #2
 8003ae4:	1d1a      	adds	r2, r3, #4
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	9203      	str	r2, [sp, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	bfb8      	it	lt
 8003aee:	f04f 33ff 	movlt.w	r3, #4294967295
 8003af2:	9305      	str	r3, [sp, #20]
 8003af4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003bc0 <_svfiprintf_r+0x1fc>
 8003af8:	2203      	movs	r2, #3
 8003afa:	4650      	mov	r0, sl
 8003afc:	7821      	ldrb	r1, [r4, #0]
 8003afe:	f000 f9f7 	bl	8003ef0 <memchr>
 8003b02:	b140      	cbz	r0, 8003b16 <_svfiprintf_r+0x152>
 8003b04:	2340      	movs	r3, #64	; 0x40
 8003b06:	eba0 000a 	sub.w	r0, r0, sl
 8003b0a:	fa03 f000 	lsl.w	r0, r3, r0
 8003b0e:	9b04      	ldr	r3, [sp, #16]
 8003b10:	3401      	adds	r4, #1
 8003b12:	4303      	orrs	r3, r0
 8003b14:	9304      	str	r3, [sp, #16]
 8003b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b1a:	2206      	movs	r2, #6
 8003b1c:	4825      	ldr	r0, [pc, #148]	; (8003bb4 <_svfiprintf_r+0x1f0>)
 8003b1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b22:	f000 f9e5 	bl	8003ef0 <memchr>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	d038      	beq.n	8003b9c <_svfiprintf_r+0x1d8>
 8003b2a:	4b23      	ldr	r3, [pc, #140]	; (8003bb8 <_svfiprintf_r+0x1f4>)
 8003b2c:	bb1b      	cbnz	r3, 8003b76 <_svfiprintf_r+0x1b2>
 8003b2e:	9b03      	ldr	r3, [sp, #12]
 8003b30:	3307      	adds	r3, #7
 8003b32:	f023 0307 	bic.w	r3, r3, #7
 8003b36:	3308      	adds	r3, #8
 8003b38:	9303      	str	r3, [sp, #12]
 8003b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b3c:	4433      	add	r3, r6
 8003b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b40:	e767      	b.n	8003a12 <_svfiprintf_r+0x4e>
 8003b42:	460c      	mov	r4, r1
 8003b44:	2001      	movs	r0, #1
 8003b46:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b4a:	e7a5      	b.n	8003a98 <_svfiprintf_r+0xd4>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f04f 0c0a 	mov.w	ip, #10
 8003b52:	4619      	mov	r1, r3
 8003b54:	3401      	adds	r4, #1
 8003b56:	9305      	str	r3, [sp, #20]
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b5e:	3a30      	subs	r2, #48	; 0x30
 8003b60:	2a09      	cmp	r2, #9
 8003b62:	d903      	bls.n	8003b6c <_svfiprintf_r+0x1a8>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0c5      	beq.n	8003af4 <_svfiprintf_r+0x130>
 8003b68:	9105      	str	r1, [sp, #20]
 8003b6a:	e7c3      	b.n	8003af4 <_svfiprintf_r+0x130>
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	2301      	movs	r3, #1
 8003b70:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b74:	e7f0      	b.n	8003b58 <_svfiprintf_r+0x194>
 8003b76:	ab03      	add	r3, sp, #12
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	462a      	mov	r2, r5
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <_svfiprintf_r+0x1f8>)
 8003b80:	a904      	add	r1, sp, #16
 8003b82:	f3af 8000 	nop.w
 8003b86:	1c42      	adds	r2, r0, #1
 8003b88:	4606      	mov	r6, r0
 8003b8a:	d1d6      	bne.n	8003b3a <_svfiprintf_r+0x176>
 8003b8c:	89ab      	ldrh	r3, [r5, #12]
 8003b8e:	065b      	lsls	r3, r3, #25
 8003b90:	f53f af2c 	bmi.w	80039ec <_svfiprintf_r+0x28>
 8003b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b96:	b01d      	add	sp, #116	; 0x74
 8003b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b9c:	ab03      	add	r3, sp, #12
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	462a      	mov	r2, r5
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <_svfiprintf_r+0x1f8>)
 8003ba6:	a904      	add	r1, sp, #16
 8003ba8:	f000 f87c 	bl	8003ca4 <_printf_i>
 8003bac:	e7eb      	b.n	8003b86 <_svfiprintf_r+0x1c2>
 8003bae:	bf00      	nop
 8003bb0:	080041b6 	.word	0x080041b6
 8003bb4:	080041c0 	.word	0x080041c0
 8003bb8:	00000000 	.word	0x00000000
 8003bbc:	0800390d 	.word	0x0800390d
 8003bc0:	080041bc 	.word	0x080041bc

08003bc4 <_printf_common>:
 8003bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc8:	4616      	mov	r6, r2
 8003bca:	4699      	mov	r9, r3
 8003bcc:	688a      	ldr	r2, [r1, #8]
 8003bce:	690b      	ldr	r3, [r1, #16]
 8003bd0:	4607      	mov	r7, r0
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	bfb8      	it	lt
 8003bd6:	4613      	movlt	r3, r2
 8003bd8:	6033      	str	r3, [r6, #0]
 8003bda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bde:	460c      	mov	r4, r1
 8003be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003be4:	b10a      	cbz	r2, 8003bea <_printf_common+0x26>
 8003be6:	3301      	adds	r3, #1
 8003be8:	6033      	str	r3, [r6, #0]
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	0699      	lsls	r1, r3, #26
 8003bee:	bf42      	ittt	mi
 8003bf0:	6833      	ldrmi	r3, [r6, #0]
 8003bf2:	3302      	addmi	r3, #2
 8003bf4:	6033      	strmi	r3, [r6, #0]
 8003bf6:	6825      	ldr	r5, [r4, #0]
 8003bf8:	f015 0506 	ands.w	r5, r5, #6
 8003bfc:	d106      	bne.n	8003c0c <_printf_common+0x48>
 8003bfe:	f104 0a19 	add.w	sl, r4, #25
 8003c02:	68e3      	ldr	r3, [r4, #12]
 8003c04:	6832      	ldr	r2, [r6, #0]
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	42ab      	cmp	r3, r5
 8003c0a:	dc28      	bgt.n	8003c5e <_printf_common+0x9a>
 8003c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c10:	1e13      	subs	r3, r2, #0
 8003c12:	6822      	ldr	r2, [r4, #0]
 8003c14:	bf18      	it	ne
 8003c16:	2301      	movne	r3, #1
 8003c18:	0692      	lsls	r2, r2, #26
 8003c1a:	d42d      	bmi.n	8003c78 <_printf_common+0xb4>
 8003c1c:	4649      	mov	r1, r9
 8003c1e:	4638      	mov	r0, r7
 8003c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c24:	47c0      	blx	r8
 8003c26:	3001      	adds	r0, #1
 8003c28:	d020      	beq.n	8003c6c <_printf_common+0xa8>
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	68e5      	ldr	r5, [r4, #12]
 8003c2e:	f003 0306 	and.w	r3, r3, #6
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	bf18      	it	ne
 8003c36:	2500      	movne	r5, #0
 8003c38:	6832      	ldr	r2, [r6, #0]
 8003c3a:	f04f 0600 	mov.w	r6, #0
 8003c3e:	68a3      	ldr	r3, [r4, #8]
 8003c40:	bf08      	it	eq
 8003c42:	1aad      	subeq	r5, r5, r2
 8003c44:	6922      	ldr	r2, [r4, #16]
 8003c46:	bf08      	it	eq
 8003c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	bfc4      	itt	gt
 8003c50:	1a9b      	subgt	r3, r3, r2
 8003c52:	18ed      	addgt	r5, r5, r3
 8003c54:	341a      	adds	r4, #26
 8003c56:	42b5      	cmp	r5, r6
 8003c58:	d11a      	bne.n	8003c90 <_printf_common+0xcc>
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	e008      	b.n	8003c70 <_printf_common+0xac>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	4652      	mov	r2, sl
 8003c62:	4649      	mov	r1, r9
 8003c64:	4638      	mov	r0, r7
 8003c66:	47c0      	blx	r8
 8003c68:	3001      	adds	r0, #1
 8003c6a:	d103      	bne.n	8003c74 <_printf_common+0xb0>
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c74:	3501      	adds	r5, #1
 8003c76:	e7c4      	b.n	8003c02 <_printf_common+0x3e>
 8003c78:	2030      	movs	r0, #48	; 0x30
 8003c7a:	18e1      	adds	r1, r4, r3
 8003c7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c86:	4422      	add	r2, r4
 8003c88:	3302      	adds	r3, #2
 8003c8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c8e:	e7c5      	b.n	8003c1c <_printf_common+0x58>
 8003c90:	2301      	movs	r3, #1
 8003c92:	4622      	mov	r2, r4
 8003c94:	4649      	mov	r1, r9
 8003c96:	4638      	mov	r0, r7
 8003c98:	47c0      	blx	r8
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	d0e6      	beq.n	8003c6c <_printf_common+0xa8>
 8003c9e:	3601      	adds	r6, #1
 8003ca0:	e7d9      	b.n	8003c56 <_printf_common+0x92>
	...

08003ca4 <_printf_i>:
 8003ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca8:	460c      	mov	r4, r1
 8003caa:	7e27      	ldrb	r7, [r4, #24]
 8003cac:	4691      	mov	r9, r2
 8003cae:	2f78      	cmp	r7, #120	; 0x78
 8003cb0:	4680      	mov	r8, r0
 8003cb2:	469a      	mov	sl, r3
 8003cb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003cb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cba:	d807      	bhi.n	8003ccc <_printf_i+0x28>
 8003cbc:	2f62      	cmp	r7, #98	; 0x62
 8003cbe:	d80a      	bhi.n	8003cd6 <_printf_i+0x32>
 8003cc0:	2f00      	cmp	r7, #0
 8003cc2:	f000 80d9 	beq.w	8003e78 <_printf_i+0x1d4>
 8003cc6:	2f58      	cmp	r7, #88	; 0x58
 8003cc8:	f000 80a4 	beq.w	8003e14 <_printf_i+0x170>
 8003ccc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003cd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cd4:	e03a      	b.n	8003d4c <_printf_i+0xa8>
 8003cd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cda:	2b15      	cmp	r3, #21
 8003cdc:	d8f6      	bhi.n	8003ccc <_printf_i+0x28>
 8003cde:	a001      	add	r0, pc, #4	; (adr r0, 8003ce4 <_printf_i+0x40>)
 8003ce0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ce4:	08003d3d 	.word	0x08003d3d
 8003ce8:	08003d51 	.word	0x08003d51
 8003cec:	08003ccd 	.word	0x08003ccd
 8003cf0:	08003ccd 	.word	0x08003ccd
 8003cf4:	08003ccd 	.word	0x08003ccd
 8003cf8:	08003ccd 	.word	0x08003ccd
 8003cfc:	08003d51 	.word	0x08003d51
 8003d00:	08003ccd 	.word	0x08003ccd
 8003d04:	08003ccd 	.word	0x08003ccd
 8003d08:	08003ccd 	.word	0x08003ccd
 8003d0c:	08003ccd 	.word	0x08003ccd
 8003d10:	08003e5f 	.word	0x08003e5f
 8003d14:	08003d81 	.word	0x08003d81
 8003d18:	08003e41 	.word	0x08003e41
 8003d1c:	08003ccd 	.word	0x08003ccd
 8003d20:	08003ccd 	.word	0x08003ccd
 8003d24:	08003e81 	.word	0x08003e81
 8003d28:	08003ccd 	.word	0x08003ccd
 8003d2c:	08003d81 	.word	0x08003d81
 8003d30:	08003ccd 	.word	0x08003ccd
 8003d34:	08003ccd 	.word	0x08003ccd
 8003d38:	08003e49 	.word	0x08003e49
 8003d3c:	680b      	ldr	r3, [r1, #0]
 8003d3e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d42:	1d1a      	adds	r2, r3, #4
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	600a      	str	r2, [r1, #0]
 8003d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0a4      	b.n	8003e9a <_printf_i+0x1f6>
 8003d50:	6825      	ldr	r5, [r4, #0]
 8003d52:	6808      	ldr	r0, [r1, #0]
 8003d54:	062e      	lsls	r6, r5, #24
 8003d56:	f100 0304 	add.w	r3, r0, #4
 8003d5a:	d50a      	bpl.n	8003d72 <_printf_i+0xce>
 8003d5c:	6805      	ldr	r5, [r0, #0]
 8003d5e:	600b      	str	r3, [r1, #0]
 8003d60:	2d00      	cmp	r5, #0
 8003d62:	da03      	bge.n	8003d6c <_printf_i+0xc8>
 8003d64:	232d      	movs	r3, #45	; 0x2d
 8003d66:	426d      	negs	r5, r5
 8003d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d6c:	230a      	movs	r3, #10
 8003d6e:	485e      	ldr	r0, [pc, #376]	; (8003ee8 <_printf_i+0x244>)
 8003d70:	e019      	b.n	8003da6 <_printf_i+0x102>
 8003d72:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d76:	6805      	ldr	r5, [r0, #0]
 8003d78:	600b      	str	r3, [r1, #0]
 8003d7a:	bf18      	it	ne
 8003d7c:	b22d      	sxthne	r5, r5
 8003d7e:	e7ef      	b.n	8003d60 <_printf_i+0xbc>
 8003d80:	680b      	ldr	r3, [r1, #0]
 8003d82:	6825      	ldr	r5, [r4, #0]
 8003d84:	1d18      	adds	r0, r3, #4
 8003d86:	6008      	str	r0, [r1, #0]
 8003d88:	0628      	lsls	r0, r5, #24
 8003d8a:	d501      	bpl.n	8003d90 <_printf_i+0xec>
 8003d8c:	681d      	ldr	r5, [r3, #0]
 8003d8e:	e002      	b.n	8003d96 <_printf_i+0xf2>
 8003d90:	0669      	lsls	r1, r5, #25
 8003d92:	d5fb      	bpl.n	8003d8c <_printf_i+0xe8>
 8003d94:	881d      	ldrh	r5, [r3, #0]
 8003d96:	2f6f      	cmp	r7, #111	; 0x6f
 8003d98:	bf0c      	ite	eq
 8003d9a:	2308      	moveq	r3, #8
 8003d9c:	230a      	movne	r3, #10
 8003d9e:	4852      	ldr	r0, [pc, #328]	; (8003ee8 <_printf_i+0x244>)
 8003da0:	2100      	movs	r1, #0
 8003da2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003da6:	6866      	ldr	r6, [r4, #4]
 8003da8:	2e00      	cmp	r6, #0
 8003daa:	bfa8      	it	ge
 8003dac:	6821      	ldrge	r1, [r4, #0]
 8003dae:	60a6      	str	r6, [r4, #8]
 8003db0:	bfa4      	itt	ge
 8003db2:	f021 0104 	bicge.w	r1, r1, #4
 8003db6:	6021      	strge	r1, [r4, #0]
 8003db8:	b90d      	cbnz	r5, 8003dbe <_printf_i+0x11a>
 8003dba:	2e00      	cmp	r6, #0
 8003dbc:	d04d      	beq.n	8003e5a <_printf_i+0x1b6>
 8003dbe:	4616      	mov	r6, r2
 8003dc0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dc4:	fb03 5711 	mls	r7, r3, r1, r5
 8003dc8:	5dc7      	ldrb	r7, [r0, r7]
 8003dca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dce:	462f      	mov	r7, r5
 8003dd0:	42bb      	cmp	r3, r7
 8003dd2:	460d      	mov	r5, r1
 8003dd4:	d9f4      	bls.n	8003dc0 <_printf_i+0x11c>
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d10b      	bne.n	8003df2 <_printf_i+0x14e>
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	07df      	lsls	r7, r3, #31
 8003dde:	d508      	bpl.n	8003df2 <_printf_i+0x14e>
 8003de0:	6923      	ldr	r3, [r4, #16]
 8003de2:	6861      	ldr	r1, [r4, #4]
 8003de4:	4299      	cmp	r1, r3
 8003de6:	bfde      	ittt	le
 8003de8:	2330      	movle	r3, #48	; 0x30
 8003dea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003df2:	1b92      	subs	r2, r2, r6
 8003df4:	6122      	str	r2, [r4, #16]
 8003df6:	464b      	mov	r3, r9
 8003df8:	4621      	mov	r1, r4
 8003dfa:	4640      	mov	r0, r8
 8003dfc:	f8cd a000 	str.w	sl, [sp]
 8003e00:	aa03      	add	r2, sp, #12
 8003e02:	f7ff fedf 	bl	8003bc4 <_printf_common>
 8003e06:	3001      	adds	r0, #1
 8003e08:	d14c      	bne.n	8003ea4 <_printf_i+0x200>
 8003e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0e:	b004      	add	sp, #16
 8003e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e14:	4834      	ldr	r0, [pc, #208]	; (8003ee8 <_printf_i+0x244>)
 8003e16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e1a:	680e      	ldr	r6, [r1, #0]
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003e22:	061f      	lsls	r7, r3, #24
 8003e24:	600e      	str	r6, [r1, #0]
 8003e26:	d514      	bpl.n	8003e52 <_printf_i+0x1ae>
 8003e28:	07d9      	lsls	r1, r3, #31
 8003e2a:	bf44      	itt	mi
 8003e2c:	f043 0320 	orrmi.w	r3, r3, #32
 8003e30:	6023      	strmi	r3, [r4, #0]
 8003e32:	b91d      	cbnz	r5, 8003e3c <_printf_i+0x198>
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	f023 0320 	bic.w	r3, r3, #32
 8003e3a:	6023      	str	r3, [r4, #0]
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	e7af      	b.n	8003da0 <_printf_i+0xfc>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	f043 0320 	orr.w	r3, r3, #32
 8003e46:	6023      	str	r3, [r4, #0]
 8003e48:	2378      	movs	r3, #120	; 0x78
 8003e4a:	4828      	ldr	r0, [pc, #160]	; (8003eec <_printf_i+0x248>)
 8003e4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e50:	e7e3      	b.n	8003e1a <_printf_i+0x176>
 8003e52:	065e      	lsls	r6, r3, #25
 8003e54:	bf48      	it	mi
 8003e56:	b2ad      	uxthmi	r5, r5
 8003e58:	e7e6      	b.n	8003e28 <_printf_i+0x184>
 8003e5a:	4616      	mov	r6, r2
 8003e5c:	e7bb      	b.n	8003dd6 <_printf_i+0x132>
 8003e5e:	680b      	ldr	r3, [r1, #0]
 8003e60:	6826      	ldr	r6, [r4, #0]
 8003e62:	1d1d      	adds	r5, r3, #4
 8003e64:	6960      	ldr	r0, [r4, #20]
 8003e66:	600d      	str	r5, [r1, #0]
 8003e68:	0635      	lsls	r5, r6, #24
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	d501      	bpl.n	8003e72 <_printf_i+0x1ce>
 8003e6e:	6018      	str	r0, [r3, #0]
 8003e70:	e002      	b.n	8003e78 <_printf_i+0x1d4>
 8003e72:	0671      	lsls	r1, r6, #25
 8003e74:	d5fb      	bpl.n	8003e6e <_printf_i+0x1ca>
 8003e76:	8018      	strh	r0, [r3, #0]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	4616      	mov	r6, r2
 8003e7c:	6123      	str	r3, [r4, #16]
 8003e7e:	e7ba      	b.n	8003df6 <_printf_i+0x152>
 8003e80:	680b      	ldr	r3, [r1, #0]
 8003e82:	1d1a      	adds	r2, r3, #4
 8003e84:	600a      	str	r2, [r1, #0]
 8003e86:	681e      	ldr	r6, [r3, #0]
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	6862      	ldr	r2, [r4, #4]
 8003e8e:	f000 f82f 	bl	8003ef0 <memchr>
 8003e92:	b108      	cbz	r0, 8003e98 <_printf_i+0x1f4>
 8003e94:	1b80      	subs	r0, r0, r6
 8003e96:	6060      	str	r0, [r4, #4]
 8003e98:	6863      	ldr	r3, [r4, #4]
 8003e9a:	6123      	str	r3, [r4, #16]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ea2:	e7a8      	b.n	8003df6 <_printf_i+0x152>
 8003ea4:	4632      	mov	r2, r6
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	4640      	mov	r0, r8
 8003eaa:	6923      	ldr	r3, [r4, #16]
 8003eac:	47d0      	blx	sl
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d0ab      	beq.n	8003e0a <_printf_i+0x166>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	079b      	lsls	r3, r3, #30
 8003eb6:	d413      	bmi.n	8003ee0 <_printf_i+0x23c>
 8003eb8:	68e0      	ldr	r0, [r4, #12]
 8003eba:	9b03      	ldr	r3, [sp, #12]
 8003ebc:	4298      	cmp	r0, r3
 8003ebe:	bfb8      	it	lt
 8003ec0:	4618      	movlt	r0, r3
 8003ec2:	e7a4      	b.n	8003e0e <_printf_i+0x16a>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	4632      	mov	r2, r6
 8003ec8:	4649      	mov	r1, r9
 8003eca:	4640      	mov	r0, r8
 8003ecc:	47d0      	blx	sl
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d09b      	beq.n	8003e0a <_printf_i+0x166>
 8003ed2:	3501      	adds	r5, #1
 8003ed4:	68e3      	ldr	r3, [r4, #12]
 8003ed6:	9903      	ldr	r1, [sp, #12]
 8003ed8:	1a5b      	subs	r3, r3, r1
 8003eda:	42ab      	cmp	r3, r5
 8003edc:	dcf2      	bgt.n	8003ec4 <_printf_i+0x220>
 8003ede:	e7eb      	b.n	8003eb8 <_printf_i+0x214>
 8003ee0:	2500      	movs	r5, #0
 8003ee2:	f104 0619 	add.w	r6, r4, #25
 8003ee6:	e7f5      	b.n	8003ed4 <_printf_i+0x230>
 8003ee8:	080041c7 	.word	0x080041c7
 8003eec:	080041d8 	.word	0x080041d8

08003ef0 <memchr>:
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	b510      	push	{r4, lr}
 8003ef4:	b2c9      	uxtb	r1, r1
 8003ef6:	4402      	add	r2, r0
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	d101      	bne.n	8003f02 <memchr+0x12>
 8003efe:	2000      	movs	r0, #0
 8003f00:	e003      	b.n	8003f0a <memchr+0x1a>
 8003f02:	7804      	ldrb	r4, [r0, #0]
 8003f04:	3301      	adds	r3, #1
 8003f06:	428c      	cmp	r4, r1
 8003f08:	d1f6      	bne.n	8003ef8 <memchr+0x8>
 8003f0a:	bd10      	pop	{r4, pc}

08003f0c <memcpy>:
 8003f0c:	440a      	add	r2, r1
 8003f0e:	4291      	cmp	r1, r2
 8003f10:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f14:	d100      	bne.n	8003f18 <memcpy+0xc>
 8003f16:	4770      	bx	lr
 8003f18:	b510      	push	{r4, lr}
 8003f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f1e:	4291      	cmp	r1, r2
 8003f20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f24:	d1f9      	bne.n	8003f1a <memcpy+0xe>
 8003f26:	bd10      	pop	{r4, pc}

08003f28 <memmove>:
 8003f28:	4288      	cmp	r0, r1
 8003f2a:	b510      	push	{r4, lr}
 8003f2c:	eb01 0402 	add.w	r4, r1, r2
 8003f30:	d902      	bls.n	8003f38 <memmove+0x10>
 8003f32:	4284      	cmp	r4, r0
 8003f34:	4623      	mov	r3, r4
 8003f36:	d807      	bhi.n	8003f48 <memmove+0x20>
 8003f38:	1e43      	subs	r3, r0, #1
 8003f3a:	42a1      	cmp	r1, r4
 8003f3c:	d008      	beq.n	8003f50 <memmove+0x28>
 8003f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f46:	e7f8      	b.n	8003f3a <memmove+0x12>
 8003f48:	4601      	mov	r1, r0
 8003f4a:	4402      	add	r2, r0
 8003f4c:	428a      	cmp	r2, r1
 8003f4e:	d100      	bne.n	8003f52 <memmove+0x2a>
 8003f50:	bd10      	pop	{r4, pc}
 8003f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f5a:	e7f7      	b.n	8003f4c <memmove+0x24>

08003f5c <_free_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	4605      	mov	r5, r0
 8003f60:	2900      	cmp	r1, #0
 8003f62:	d043      	beq.n	8003fec <_free_r+0x90>
 8003f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f68:	1f0c      	subs	r4, r1, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bfb8      	it	lt
 8003f6e:	18e4      	addlt	r4, r4, r3
 8003f70:	f000 f8d0 	bl	8004114 <__malloc_lock>
 8003f74:	4a1e      	ldr	r2, [pc, #120]	; (8003ff0 <_free_r+0x94>)
 8003f76:	6813      	ldr	r3, [r2, #0]
 8003f78:	4610      	mov	r0, r2
 8003f7a:	b933      	cbnz	r3, 8003f8a <_free_r+0x2e>
 8003f7c:	6063      	str	r3, [r4, #4]
 8003f7e:	6014      	str	r4, [r2, #0]
 8003f80:	4628      	mov	r0, r5
 8003f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f86:	f000 b8cb 	b.w	8004120 <__malloc_unlock>
 8003f8a:	42a3      	cmp	r3, r4
 8003f8c:	d90a      	bls.n	8003fa4 <_free_r+0x48>
 8003f8e:	6821      	ldr	r1, [r4, #0]
 8003f90:	1862      	adds	r2, r4, r1
 8003f92:	4293      	cmp	r3, r2
 8003f94:	bf01      	itttt	eq
 8003f96:	681a      	ldreq	r2, [r3, #0]
 8003f98:	685b      	ldreq	r3, [r3, #4]
 8003f9a:	1852      	addeq	r2, r2, r1
 8003f9c:	6022      	streq	r2, [r4, #0]
 8003f9e:	6063      	str	r3, [r4, #4]
 8003fa0:	6004      	str	r4, [r0, #0]
 8003fa2:	e7ed      	b.n	8003f80 <_free_r+0x24>
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	b10b      	cbz	r3, 8003fae <_free_r+0x52>
 8003faa:	42a3      	cmp	r3, r4
 8003fac:	d9fa      	bls.n	8003fa4 <_free_r+0x48>
 8003fae:	6811      	ldr	r1, [r2, #0]
 8003fb0:	1850      	adds	r0, r2, r1
 8003fb2:	42a0      	cmp	r0, r4
 8003fb4:	d10b      	bne.n	8003fce <_free_r+0x72>
 8003fb6:	6820      	ldr	r0, [r4, #0]
 8003fb8:	4401      	add	r1, r0
 8003fba:	1850      	adds	r0, r2, r1
 8003fbc:	4283      	cmp	r3, r0
 8003fbe:	6011      	str	r1, [r2, #0]
 8003fc0:	d1de      	bne.n	8003f80 <_free_r+0x24>
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4401      	add	r1, r0
 8003fc8:	6011      	str	r1, [r2, #0]
 8003fca:	6053      	str	r3, [r2, #4]
 8003fcc:	e7d8      	b.n	8003f80 <_free_r+0x24>
 8003fce:	d902      	bls.n	8003fd6 <_free_r+0x7a>
 8003fd0:	230c      	movs	r3, #12
 8003fd2:	602b      	str	r3, [r5, #0]
 8003fd4:	e7d4      	b.n	8003f80 <_free_r+0x24>
 8003fd6:	6820      	ldr	r0, [r4, #0]
 8003fd8:	1821      	adds	r1, r4, r0
 8003fda:	428b      	cmp	r3, r1
 8003fdc:	bf01      	itttt	eq
 8003fde:	6819      	ldreq	r1, [r3, #0]
 8003fe0:	685b      	ldreq	r3, [r3, #4]
 8003fe2:	1809      	addeq	r1, r1, r0
 8003fe4:	6021      	streq	r1, [r4, #0]
 8003fe6:	6063      	str	r3, [r4, #4]
 8003fe8:	6054      	str	r4, [r2, #4]
 8003fea:	e7c9      	b.n	8003f80 <_free_r+0x24>
 8003fec:	bd38      	pop	{r3, r4, r5, pc}
 8003fee:	bf00      	nop
 8003ff0:	200000f4 	.word	0x200000f4

08003ff4 <_malloc_r>:
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	1ccd      	adds	r5, r1, #3
 8003ff8:	f025 0503 	bic.w	r5, r5, #3
 8003ffc:	3508      	adds	r5, #8
 8003ffe:	2d0c      	cmp	r5, #12
 8004000:	bf38      	it	cc
 8004002:	250c      	movcc	r5, #12
 8004004:	2d00      	cmp	r5, #0
 8004006:	4606      	mov	r6, r0
 8004008:	db01      	blt.n	800400e <_malloc_r+0x1a>
 800400a:	42a9      	cmp	r1, r5
 800400c:	d903      	bls.n	8004016 <_malloc_r+0x22>
 800400e:	230c      	movs	r3, #12
 8004010:	6033      	str	r3, [r6, #0]
 8004012:	2000      	movs	r0, #0
 8004014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004016:	f000 f87d 	bl	8004114 <__malloc_lock>
 800401a:	4921      	ldr	r1, [pc, #132]	; (80040a0 <_malloc_r+0xac>)
 800401c:	680a      	ldr	r2, [r1, #0]
 800401e:	4614      	mov	r4, r2
 8004020:	b99c      	cbnz	r4, 800404a <_malloc_r+0x56>
 8004022:	4f20      	ldr	r7, [pc, #128]	; (80040a4 <_malloc_r+0xb0>)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	b923      	cbnz	r3, 8004032 <_malloc_r+0x3e>
 8004028:	4621      	mov	r1, r4
 800402a:	4630      	mov	r0, r6
 800402c:	f000 f862 	bl	80040f4 <_sbrk_r>
 8004030:	6038      	str	r0, [r7, #0]
 8004032:	4629      	mov	r1, r5
 8004034:	4630      	mov	r0, r6
 8004036:	f000 f85d 	bl	80040f4 <_sbrk_r>
 800403a:	1c43      	adds	r3, r0, #1
 800403c:	d123      	bne.n	8004086 <_malloc_r+0x92>
 800403e:	230c      	movs	r3, #12
 8004040:	4630      	mov	r0, r6
 8004042:	6033      	str	r3, [r6, #0]
 8004044:	f000 f86c 	bl	8004120 <__malloc_unlock>
 8004048:	e7e3      	b.n	8004012 <_malloc_r+0x1e>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	1b5b      	subs	r3, r3, r5
 800404e:	d417      	bmi.n	8004080 <_malloc_r+0x8c>
 8004050:	2b0b      	cmp	r3, #11
 8004052:	d903      	bls.n	800405c <_malloc_r+0x68>
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	441c      	add	r4, r3
 8004058:	6025      	str	r5, [r4, #0]
 800405a:	e004      	b.n	8004066 <_malloc_r+0x72>
 800405c:	6863      	ldr	r3, [r4, #4]
 800405e:	42a2      	cmp	r2, r4
 8004060:	bf0c      	ite	eq
 8004062:	600b      	streq	r3, [r1, #0]
 8004064:	6053      	strne	r3, [r2, #4]
 8004066:	4630      	mov	r0, r6
 8004068:	f000 f85a 	bl	8004120 <__malloc_unlock>
 800406c:	f104 000b 	add.w	r0, r4, #11
 8004070:	1d23      	adds	r3, r4, #4
 8004072:	f020 0007 	bic.w	r0, r0, #7
 8004076:	1ac2      	subs	r2, r0, r3
 8004078:	d0cc      	beq.n	8004014 <_malloc_r+0x20>
 800407a:	1a1b      	subs	r3, r3, r0
 800407c:	50a3      	str	r3, [r4, r2]
 800407e:	e7c9      	b.n	8004014 <_malloc_r+0x20>
 8004080:	4622      	mov	r2, r4
 8004082:	6864      	ldr	r4, [r4, #4]
 8004084:	e7cc      	b.n	8004020 <_malloc_r+0x2c>
 8004086:	1cc4      	adds	r4, r0, #3
 8004088:	f024 0403 	bic.w	r4, r4, #3
 800408c:	42a0      	cmp	r0, r4
 800408e:	d0e3      	beq.n	8004058 <_malloc_r+0x64>
 8004090:	1a21      	subs	r1, r4, r0
 8004092:	4630      	mov	r0, r6
 8004094:	f000 f82e 	bl	80040f4 <_sbrk_r>
 8004098:	3001      	adds	r0, #1
 800409a:	d1dd      	bne.n	8004058 <_malloc_r+0x64>
 800409c:	e7cf      	b.n	800403e <_malloc_r+0x4a>
 800409e:	bf00      	nop
 80040a0:	200000f4 	.word	0x200000f4
 80040a4:	200000f8 	.word	0x200000f8

080040a8 <_realloc_r>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	4607      	mov	r7, r0
 80040ac:	4614      	mov	r4, r2
 80040ae:	460e      	mov	r6, r1
 80040b0:	b921      	cbnz	r1, 80040bc <_realloc_r+0x14>
 80040b2:	4611      	mov	r1, r2
 80040b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80040b8:	f7ff bf9c 	b.w	8003ff4 <_malloc_r>
 80040bc:	b922      	cbnz	r2, 80040c8 <_realloc_r+0x20>
 80040be:	f7ff ff4d 	bl	8003f5c <_free_r>
 80040c2:	4625      	mov	r5, r4
 80040c4:	4628      	mov	r0, r5
 80040c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040c8:	f000 f830 	bl	800412c <_malloc_usable_size_r>
 80040cc:	42a0      	cmp	r0, r4
 80040ce:	d20f      	bcs.n	80040f0 <_realloc_r+0x48>
 80040d0:	4621      	mov	r1, r4
 80040d2:	4638      	mov	r0, r7
 80040d4:	f7ff ff8e 	bl	8003ff4 <_malloc_r>
 80040d8:	4605      	mov	r5, r0
 80040da:	2800      	cmp	r0, #0
 80040dc:	d0f2      	beq.n	80040c4 <_realloc_r+0x1c>
 80040de:	4631      	mov	r1, r6
 80040e0:	4622      	mov	r2, r4
 80040e2:	f7ff ff13 	bl	8003f0c <memcpy>
 80040e6:	4631      	mov	r1, r6
 80040e8:	4638      	mov	r0, r7
 80040ea:	f7ff ff37 	bl	8003f5c <_free_r>
 80040ee:	e7e9      	b.n	80040c4 <_realloc_r+0x1c>
 80040f0:	4635      	mov	r5, r6
 80040f2:	e7e7      	b.n	80040c4 <_realloc_r+0x1c>

080040f4 <_sbrk_r>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	2300      	movs	r3, #0
 80040f8:	4d05      	ldr	r5, [pc, #20]	; (8004110 <_sbrk_r+0x1c>)
 80040fa:	4604      	mov	r4, r0
 80040fc:	4608      	mov	r0, r1
 80040fe:	602b      	str	r3, [r5, #0]
 8004100:	f7fd f8f0 	bl	80012e4 <_sbrk>
 8004104:	1c43      	adds	r3, r0, #1
 8004106:	d102      	bne.n	800410e <_sbrk_r+0x1a>
 8004108:	682b      	ldr	r3, [r5, #0]
 800410a:	b103      	cbz	r3, 800410e <_sbrk_r+0x1a>
 800410c:	6023      	str	r3, [r4, #0]
 800410e:	bd38      	pop	{r3, r4, r5, pc}
 8004110:	20000214 	.word	0x20000214

08004114 <__malloc_lock>:
 8004114:	4801      	ldr	r0, [pc, #4]	; (800411c <__malloc_lock+0x8>)
 8004116:	f000 b811 	b.w	800413c <__retarget_lock_acquire_recursive>
 800411a:	bf00      	nop
 800411c:	2000021c 	.word	0x2000021c

08004120 <__malloc_unlock>:
 8004120:	4801      	ldr	r0, [pc, #4]	; (8004128 <__malloc_unlock+0x8>)
 8004122:	f000 b80c 	b.w	800413e <__retarget_lock_release_recursive>
 8004126:	bf00      	nop
 8004128:	2000021c 	.word	0x2000021c

0800412c <_malloc_usable_size_r>:
 800412c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004130:	1f18      	subs	r0, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	bfbc      	itt	lt
 8004136:	580b      	ldrlt	r3, [r1, r0]
 8004138:	18c0      	addlt	r0, r0, r3
 800413a:	4770      	bx	lr

0800413c <__retarget_lock_acquire_recursive>:
 800413c:	4770      	bx	lr

0800413e <__retarget_lock_release_recursive>:
 800413e:	4770      	bx	lr

08004140 <_init>:
 8004140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004142:	bf00      	nop
 8004144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004146:	bc08      	pop	{r3}
 8004148:	469e      	mov	lr, r3
 800414a:	4770      	bx	lr

0800414c <_fini>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	bf00      	nop
 8004150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004152:	bc08      	pop	{r3}
 8004154:	469e      	mov	lr, r3
 8004156:	4770      	bx	lr
